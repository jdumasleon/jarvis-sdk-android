// Signature format: 4.0
package com.jarvis.core.internal.common.di {

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @dagger.Module @dagger.hilt.InstallIn(SingletonComponent::class) public final class CoroutineDispatcherModule {
    method @com.jarvis.core.internal.common.di.CoroutineDispatcherModule.DefaultDispatcher @dagger.Provides @javax.inject.Singleton public kotlinx.coroutines.CoroutineDispatcher providesDefaultDispatcher();
    method @com.jarvis.core.internal.common.di.CoroutineDispatcherModule.IoDispatcher @dagger.Provides @javax.inject.Singleton public kotlinx.coroutines.CoroutineDispatcher providesIoDispatcher();
    method @com.jarvis.core.internal.common.di.CoroutineDispatcherModule.MainDispatcher @dagger.Provides @javax.inject.Singleton public kotlinx.coroutines.CoroutineDispatcher providesMainDispatcher();
    method @com.jarvis.core.internal.common.di.CoroutineDispatcherModule.UnconfinedDispatcher @dagger.Provides @javax.inject.Singleton public kotlinx.coroutines.CoroutineDispatcher providesUnconfinedDispatcher();
    field public static final com.jarvis.core.internal.common.di.CoroutineDispatcherModule INSTANCE;
  }

  @javax.inject.Qualifier @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention.BINARY) public static @interface CoroutineDispatcherModule.DefaultDispatcher {
  }

  @javax.inject.Qualifier @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention.BINARY) public static @interface CoroutineDispatcherModule.IoDispatcher {
  }

  @javax.inject.Qualifier @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention.BINARY) public static @interface CoroutineDispatcherModule.MainDispatcher {
  }

  @javax.inject.Qualifier @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention.BINARY) public static @interface CoroutineDispatcherModule.UnconfinedDispatcher {
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @dagger.Module @dagger.hilt.InstallIn(SingletonComponent::class) public abstract class DataModule {
    ctor public DataModule();
  }

}

package com.jarvis.core.internal.common.errorHandling {

  public class ErrorType {
    ctor public ErrorType();
  }

  public static final class ErrorType.ClientError extends com.jarvis.core.internal.common.errorHandling.ErrorType {
    field public static final com.jarvis.core.internal.common.errorHandling.ErrorType.ClientError INSTANCE;
  }

  public static final class ErrorType.Conflict extends com.jarvis.core.internal.common.errorHandling.ErrorType {
    field public static final com.jarvis.core.internal.common.errorHandling.ErrorType.Conflict INSTANCE;
  }

  public static final class ErrorType.ExportEventsError extends com.jarvis.core.internal.common.errorHandling.ErrorType {
    field public static final com.jarvis.core.internal.common.errorHandling.ErrorType.ExportEventsError INSTANCE;
  }

  public static final class ErrorType.Forbidden extends com.jarvis.core.internal.common.errorHandling.ErrorType {
    field public static final com.jarvis.core.internal.common.errorHandling.ErrorType.Forbidden INSTANCE;
  }

  public static final class ErrorType.GenericError extends com.jarvis.core.internal.common.errorHandling.ErrorType {
    ctor public ErrorType.GenericError(int message);
    method public int component1();
    method public com.jarvis.core.internal.common.errorHandling.ErrorType.GenericError copy(int message);
    method public int getMessage();
    property public final int message;
  }

  public static final class ErrorType.InvalidDataFormat extends com.jarvis.core.internal.common.errorHandling.ErrorType {
    field public static final com.jarvis.core.internal.common.errorHandling.ErrorType.InvalidDataFormat INSTANCE;
  }

  public static final class ErrorType.NoData extends com.jarvis.core.internal.common.errorHandling.ErrorType {
    field public static final com.jarvis.core.internal.common.errorHandling.ErrorType.NoData INSTANCE;
  }

  public static final class ErrorType.NoInternetConnection extends com.jarvis.core.internal.common.errorHandling.ErrorType {
    field public static final com.jarvis.core.internal.common.errorHandling.ErrorType.NoInternetConnection INSTANCE;
  }

  public static final class ErrorType.NotFound extends com.jarvis.core.internal.common.errorHandling.ErrorType {
    field public static final com.jarvis.core.internal.common.errorHandling.ErrorType.NotFound INSTANCE;
  }

  public static final class ErrorType.PrintError extends com.jarvis.core.internal.common.errorHandling.ErrorType {
    field public static final com.jarvis.core.internal.common.errorHandling.ErrorType.PrintError INSTANCE;
  }

  public static final class ErrorType.ServerError extends com.jarvis.core.internal.common.errorHandling.ErrorType {
    field public static final com.jarvis.core.internal.common.errorHandling.ErrorType.ServerError INSTANCE;
  }

  public static final class ErrorType.Unauthorized extends com.jarvis.core.internal.common.errorHandling.ErrorType {
    field public static final com.jarvis.core.internal.common.errorHandling.ErrorType.Unauthorized INSTANCE;
  }

  public static final class ErrorType.UnknownError extends com.jarvis.core.internal.common.errorHandling.ErrorType {
    field public static final com.jarvis.core.internal.common.errorHandling.ErrorType.UnknownError INSTANCE;
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public final class ErrorTypeKt {
    method public static com.jarvis.core.internal.common.errorHandling.ErrorType handleErrorType(Throwable throwable);
  }

}

package com.jarvis.core.internal.common.exceptions {

  public final class HTTPException extends java.lang.RuntimeException {
    ctor public HTTPException(String message, Throwable cause, int statusCode);
    method public int getStatusCode();
    property public Throwable cause;
    property public String message;
    property public final int statusCode;
  }

  public abstract sealed class HttpStatusCodes {
    method public final int getCode();
    property public final int code;
    field public static final int ACCEPTED_CODE = 202; // 0xca
    field public static final int BAD_GATEWAY_CODE = 502; // 0x1f6
    field public static final int BAD_REQUEST_CODE = 400; // 0x190
    field public static final int CONFLICT_CODE = 409; // 0x199
    field public static final int CREATED_CODE = 201; // 0xc9
    field public static final com.jarvis.core.internal.common.exceptions.HttpStatusCodes.Companion Companion;
    field public static final int FORBIDDEN_CODE = 403; // 0x193
    field public static final int GATEWAY_TIMEOUT_CODE = 504; // 0x1f8
    field public static final int INTERNAL_SERVER_ERROR_CODE = 500; // 0x1f4
    field public static final int NOT_FOUND_CODE = 404; // 0x194
    field public static final int NO_CONTENT_CODE = 204; // 0xcc
    field public static final int OK_CODE = 200; // 0xc8
    field public static final int SERVICE_UNAVAILABLE_CODE = 503; // 0x1f7
    field public static final int UNAUTHORIZED_CODE = 401; // 0x191
  }

  public static final class HttpStatusCodes.Accepted extends com.jarvis.core.internal.common.exceptions.HttpStatusCodes {
    field public static final com.jarvis.core.internal.common.exceptions.HttpStatusCodes.Accepted INSTANCE;
  }

  public static final class HttpStatusCodes.BadGateway extends com.jarvis.core.internal.common.exceptions.HttpStatusCodes {
    field public static final com.jarvis.core.internal.common.exceptions.HttpStatusCodes.BadGateway INSTANCE;
  }

  public static final class HttpStatusCodes.BadRequest extends com.jarvis.core.internal.common.exceptions.HttpStatusCodes {
    field public static final com.jarvis.core.internal.common.exceptions.HttpStatusCodes.BadRequest INSTANCE;
  }

  public static final class HttpStatusCodes.Companion {
  }

  public static final class HttpStatusCodes.Conflict extends com.jarvis.core.internal.common.exceptions.HttpStatusCodes {
    field public static final com.jarvis.core.internal.common.exceptions.HttpStatusCodes.Conflict INSTANCE;
  }

  public static final class HttpStatusCodes.Created extends com.jarvis.core.internal.common.exceptions.HttpStatusCodes {
    field public static final com.jarvis.core.internal.common.exceptions.HttpStatusCodes.Created INSTANCE;
  }

  public static final class HttpStatusCodes.Forbidden extends com.jarvis.core.internal.common.exceptions.HttpStatusCodes {
    field public static final com.jarvis.core.internal.common.exceptions.HttpStatusCodes.Forbidden INSTANCE;
  }

  public static final class HttpStatusCodes.GatewayTimeout extends com.jarvis.core.internal.common.exceptions.HttpStatusCodes {
    field public static final com.jarvis.core.internal.common.exceptions.HttpStatusCodes.GatewayTimeout INSTANCE;
  }

  public static final class HttpStatusCodes.InternalServerError extends com.jarvis.core.internal.common.exceptions.HttpStatusCodes {
    field public static final com.jarvis.core.internal.common.exceptions.HttpStatusCodes.InternalServerError INSTANCE;
  }

  public static final class HttpStatusCodes.NoContent extends com.jarvis.core.internal.common.exceptions.HttpStatusCodes {
    field public static final com.jarvis.core.internal.common.exceptions.HttpStatusCodes.NoContent INSTANCE;
  }

  public static final class HttpStatusCodes.NotFound extends com.jarvis.core.internal.common.exceptions.HttpStatusCodes {
    field public static final com.jarvis.core.internal.common.exceptions.HttpStatusCodes.NotFound INSTANCE;
  }

  public static final class HttpStatusCodes.OK extends com.jarvis.core.internal.common.exceptions.HttpStatusCodes {
    field public static final com.jarvis.core.internal.common.exceptions.HttpStatusCodes.OK INSTANCE;
  }

  public static final class HttpStatusCodes.ServiceUnavailable extends com.jarvis.core.internal.common.exceptions.HttpStatusCodes {
    field public static final com.jarvis.core.internal.common.exceptions.HttpStatusCodes.ServiceUnavailable INSTANCE;
  }

  public static final class HttpStatusCodes.Unauthorized extends com.jarvis.core.internal.common.exceptions.HttpStatusCodes {
    field public static final com.jarvis.core.internal.common.exceptions.HttpStatusCodes.Unauthorized INSTANCE;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public final class NoInternetException extends java.io.IOException {
    ctor public NoInternetException(String message);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public final class NullResponseBodyException extends java.io.IOException {
    ctor public NullResponseBodyException(optional String message);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public final class UnknownErrorException extends java.io.IOException {
    ctor public UnknownErrorException(String message);
  }

}

package com.jarvis.core.internal.common.extensions {

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public final class DateExtensionsKt {
    method public static String format(java.util.Date?, optional String format);
    method public static error.NonExistentClass! getSupportedDateFormat();
    property public static final error.NonExistentClass! supportedDateFormat;
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public final class StringExtensionsKt {
    method public static boolean isValidDate(String);
    method public static java.util.Date? toDate(String);
  }

}

package com.jarvis.core.internal.common.network {

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public interface NetworkMonitor {
    method public kotlinx.coroutines.flow.Flow<java.lang.Boolean> isOnline();
    property public abstract kotlinx.coroutines.flow.Flow<java.lang.Boolean> isOnline;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public final class NetworkMonitorManager implements com.jarvis.core.internal.common.network.NetworkMonitor {
    ctor @javax.inject.Inject public NetworkMonitorManager(@dagger.hilt.android.qualifiers.ApplicationContext android.content.Context context, @com.jarvis.core.internal.common.di.CoroutineDispatcherModule.IoDispatcher kotlinx.coroutines.CoroutineDispatcher ioDispatcher);
    method public kotlinx.coroutines.flow.Flow<java.lang.Boolean> isOnline();
    property public kotlinx.coroutines.flow.Flow<java.lang.Boolean> isOnline;
  }

}

package com.jarvis.core.internal.common.registry {

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public final class DataStoreRegistry {
    method public androidx.datastore.core.DataStore<androidx.datastore.preferences.core.Preferences>? getPreferencesDataStore(String name);
    method public androidx.datastore.core.DataStore<?>? getProtoDataStore(String name);
    method public kotlin.jvm.functions.Function1<java.lang.Object,java.util.Map<java.lang.String,java.lang.Object>>? getProtoExtractor(String name);
    method public java.util.Set<java.lang.String> getRegisteredPreferencesDataStores();
    method public java.util.Set<java.lang.String> getRegisteredProtoDataStores();
    method public boolean isPreferencesDataStoreRegistered(String name);
    method public boolean isProtoDataStoreRegistered(String name);
    method public void registerPreferencesDataStore(String name, androidx.datastore.core.DataStore<androidx.datastore.preferences.core.Preferences> dataStore);
    method public <T extends com.google.protobuf.MessageLite> void registerProtoDataStore(String name, androidx.datastore.core.DataStore<T> dataStore, kotlin.jvm.functions.Function1<? super T,? extends java.util.Map<java.lang.String,?>> extractor);
    field public static final com.jarvis.core.internal.common.registry.DataStoreRegistry INSTANCE;
  }

}

package com.jarvis.core.internal.data.common {

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public final class ConstantsKt {
    field public static final String API_URL = "";
    field public static final String API_VERSION_1 = "//v1";
    field public static final long RETROFIT_READ_TIME_OUT = 60L; // 0x3cL
    field public static final long RETROFIT_WRITE_TIME_OUT = 60L; // 0x3cL
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public interface DataFactory<C, R> {
    method public C getCacheDataStore();
    method public R getRemoteDataStore();
    property public abstract C cacheDataStore;
    property public abstract R remoteDataStore;
  }

}

package com.jarvis.core.internal.data.di {

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @dagger.Module @dagger.hilt.InstallIn(SingletonComponent::class) public abstract class PerformanceModule {
    ctor public PerformanceModule();
    field public static final com.jarvis.core.internal.data.di.PerformanceModule.Companion Companion;
  }

  public static final class PerformanceModule.Companion {
  }

}

package com.jarvis.core.internal.data.helpers {

  public final class NetworkHelperKt {
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static <T> kotlinx.coroutines.flow.Flow<kotlin.Result<T>> requestFlow(kotlin.jvm.functions.Function1<? super kotlin.coroutines.Continuation<? super T>,?> call);
  }

}

package com.jarvis.core.internal.data.performance {

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @javax.inject.Singleton public final class PerformanceManager {
    ctor @javax.inject.Inject public PerformanceManager(com.jarvis.core.internal.domain.performance.PerformanceRepository performanceRepository);
    method public kotlinx.coroutines.flow.Flow<com.jarvis.core.internal.domain.performance.PerformanceSnapshot> getPerformanceMetricsFlow();
    method public void initialize();
    method public suspend Object? isMonitoring(kotlin.coroutines.Continuation<? super java.lang.Boolean>);
    method public void shutdown();
  }

}

package com.jarvis.core.internal.data.performance.monitor {

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @javax.inject.Singleton public final class CpuMonitor {
    ctor @javax.inject.Inject public CpuMonitor();
    method public kotlinx.coroutines.flow.Flow<com.jarvis.core.internal.domain.performance.CpuMetrics> getCpuMetricsFlow(optional long intervalMs);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @javax.inject.Singleton public final class FpsMonitor {
    ctor @javax.inject.Inject public FpsMonitor();
    method public java.util.Map<java.lang.String,java.lang.Object> getDetailedFrameInfo();
    method public kotlinx.coroutines.flow.Flow<com.jarvis.core.internal.domain.performance.FpsMetrics> getFpsMetricsFlow(optional long intervalMs);
    method public void stopMonitoring();
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @javax.inject.Singleton public final class JankMonitor {
    ctor @javax.inject.Inject public JankMonitor();
    method public java.util.Map<java.lang.String,java.lang.Object> getDetailedReport();
    method public boolean isCurrentlyMonitoring();
    method public kotlinx.coroutines.flow.Flow<com.jarvis.core.internal.data.performance.monitor.JankMonitor.JankMetrics> startMonitoring();
    method public void stopMonitoring();
    field public static final com.jarvis.core.internal.data.performance.monitor.JankMonitor.Companion Companion;
  }

  public static final class JankMonitor.Companion {
  }

  public static final class JankMonitor.JankMetrics {
    ctor public JankMonitor.JankMetrics(optional int frameDrops, optional int jankFrames, optional int frozenFrames, optional float averageFrameTime, optional float maxFrameTime, optional float animationFrameRate, optional boolean isAnimationSmooth, optional long timestamp);
    method public int component1();
    method public int component2();
    method public int component3();
    method public float component4();
    method public float component5();
    method public float component6();
    method public boolean component7();
    method public long component8();
    method public com.jarvis.core.internal.data.performance.monitor.JankMonitor.JankMetrics copy(int frameDrops, int jankFrames, int frozenFrames, float averageFrameTime, float maxFrameTime, float animationFrameRate, boolean isAnimationSmooth, long timestamp);
    method public float getAnimationFrameRate();
    method public float getAverageFrameTime();
    method public int getFrameDrops();
    method public int getFrozenFrames();
    method public int getJankFrames();
    method public com.jarvis.core.internal.data.performance.monitor.JankMonitor.JankSeverity getJankSeverity();
    method public float getMaxFrameTime();
    method public long getTimestamp();
    method public boolean isAnimationSmooth();
    property public final float animationFrameRate;
    property public final float averageFrameTime;
    property public final int frameDrops;
    property public final int frozenFrames;
    property public final boolean isAnimationSmooth;
    property public final int jankFrames;
    property public final com.jarvis.core.internal.data.performance.monitor.JankMonitor.JankSeverity jankSeverity;
    property public final float maxFrameTime;
    property public final long timestamp;
  }

  public enum JankMonitor.JankSeverity {
    method public static com.jarvis.core.internal.data.performance.monitor.JankMonitor.JankSeverity valueOf(String value) throws java.lang.IllegalArgumentException, java.lang.NullPointerException;
    method public static com.jarvis.core.internal.data.performance.monitor.JankMonitor.JankSeverity[] values();
    enum_constant public static final com.jarvis.core.internal.data.performance.monitor.JankMonitor.JankSeverity CRITICAL;
    enum_constant public static final com.jarvis.core.internal.data.performance.monitor.JankMonitor.JankSeverity HIGH;
    enum_constant public static final com.jarvis.core.internal.data.performance.monitor.JankMonitor.JankSeverity LOW;
    enum_constant public static final com.jarvis.core.internal.data.performance.monitor.JankMonitor.JankSeverity MEDIUM;
    enum_constant public static final com.jarvis.core.internal.data.performance.monitor.JankMonitor.JankSeverity NONE;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @javax.inject.Singleton public final class MemoryMonitor {
    ctor @javax.inject.Inject public MemoryMonitor(@dagger.hilt.android.qualifiers.ApplicationContext android.content.Context context);
    method public java.util.Map<java.lang.String,java.lang.Object> getDetailedMemoryInfo();
    method public kotlinx.coroutines.flow.Flow<com.jarvis.core.internal.domain.performance.MemoryMetrics> getMemoryMetricsFlow(optional long intervalMs);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @javax.inject.Singleton public final class ModuleLoadMonitor {
    ctor @javax.inject.Inject public ModuleLoadMonitor();
    method public void clearHistory();
    method public void endModuleLoad(String timerId, String moduleName, optional com.jarvis.core.internal.domain.performance.LoadType loadType, optional boolean isLazyLoaded);
    method public java.util.Map<java.lang.String,java.lang.Object> getDetailedModuleStats();
    method public kotlinx.coroutines.flow.Flow<com.jarvis.core.internal.domain.performance.ModuleMetrics> getModuleMetricsFlow();
    method public void recordColdStart();
    method public void recordModuleLoad(String moduleName, long duration, optional com.jarvis.core.internal.domain.performance.LoadType loadType, optional boolean isLazyLoaded);
    method public void recordStartupComplete();
    method public void recordWarmStart();
    method public String startModuleLoad(String moduleName, optional com.jarvis.core.internal.domain.performance.LoadType loadType);
    method public inline <T> T timeModuleLoad(String moduleName, optional com.jarvis.core.internal.domain.performance.LoadType loadType, optional boolean isLazyLoaded, kotlin.jvm.functions.Function0<? extends T> block);
    method public suspend inline <T> Object? timeModuleLoadSuspend(String moduleName, optional com.jarvis.core.internal.domain.performance.LoadType loadType, optional boolean isLazyLoaded, kotlin.jvm.functions.Function1<? super kotlin.coroutines.Continuation<? super T>,?> block, kotlin.coroutines.Continuation<? super T>);
    property public final kotlinx.coroutines.flow.Flow<com.jarvis.core.internal.domain.performance.ModuleMetrics> moduleMetricsFlow;
  }

}

package com.jarvis.core.internal.data.performance.repository {

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @javax.inject.Singleton public final class PerformanceRepositoryImpl implements com.jarvis.core.internal.domain.performance.PerformanceRepository {
    ctor @javax.inject.Inject public PerformanceRepositoryImpl(com.jarvis.core.internal.data.performance.monitor.CpuMonitor cpuMonitor, com.jarvis.core.internal.data.performance.monitor.MemoryMonitor memoryMonitor, com.jarvis.core.internal.data.performance.monitor.FpsMonitor fpsMonitor, com.jarvis.core.internal.data.performance.monitor.ModuleLoadMonitor moduleLoadMonitor, com.jarvis.core.internal.data.performance.monitor.JankMonitor jankMonitor, com.google.gson.Gson gson, @com.jarvis.core.internal.common.di.CoroutineDispatcherModule.IoDispatcher kotlinx.coroutines.CoroutineDispatcher ioDispatcher);
    method public suspend Object? clearHistory(kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public suspend Object? exportMetrics(kotlin.coroutines.Continuation<? super java.lang.String>);
    method public suspend Object? getConfig(kotlin.coroutines.Continuation<? super com.jarvis.core.internal.domain.performance.PerformanceConfig>);
    method public kotlinx.coroutines.flow.Flow<com.jarvis.core.internal.domain.performance.CpuMetrics> getCpuMetricsFlow();
    method public kotlinx.coroutines.flow.Flow<com.jarvis.core.internal.domain.performance.FpsMetrics> getFpsMetricsFlow();
    method public kotlinx.coroutines.flow.Flow<com.jarvis.core.internal.data.performance.monitor.JankMonitor.JankMetrics> getJarvisAssistantJankFlow();
    method public kotlinx.coroutines.flow.Flow<com.jarvis.core.internal.domain.performance.MemoryMetrics> getMemoryMetricsFlow();
    method public kotlinx.coroutines.flow.Flow<com.jarvis.core.internal.domain.performance.ModuleMetrics> getModuleMetricsFlow();
    method public kotlinx.coroutines.flow.Flow<java.util.List<com.jarvis.core.internal.domain.performance.PerformanceSnapshot>> getPerformanceHistory(int durationMinutes);
    method public kotlinx.coroutines.flow.Flow<com.jarvis.core.internal.domain.performance.PerformanceSnapshot> getPerformanceMetricsFlow();
    method public suspend Object? isMonitoring(kotlin.coroutines.Continuation<? super java.lang.Boolean>);
    method public suspend Object? startMonitoring(com.jarvis.core.internal.domain.performance.PerformanceConfig config, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public void stopJarvisAssistantJankMonitoring();
    method public suspend Object? stopMonitoring(kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public suspend Object? updateConfig(com.jarvis.core.internal.domain.performance.PerformanceConfig config, kotlin.coroutines.Continuation<? super kotlin.Unit>);
  }

}

package com.jarvis.core.internal.data.serializers {

  @Keep @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public final class GsonDateDeserializer implements com.google.gson.JsonDeserializer<java.util.Date> com.google.gson.JsonSerializer<java.util.Date> {
    ctor public GsonDateDeserializer();
    method public java.util.Date deserialize(com.google.gson.JsonElement? json, java.lang.reflect.Type? typeOfT, com.google.gson.JsonDeserializationContext? context);
    method public com.google.gson.JsonElement? serialize(java.util.Date? src, java.lang.reflect.Type? typeOfSrc, com.google.gson.JsonSerializationContext? context);
  }

  public final class GsonExtensionKt {
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static com.google.gson.GsonBuilder setupTypeAdapters(com.google.gson.GsonBuilder);
  }

}

package com.jarvis.core.internal.designsystem.component {

  public final class AbsolutePixelPadding {
    ctor public AbsolutePixelPadding(float start, float end, float top, float bottom);
    method public float component1();
    method public float component2();
    method public float component3();
    method public float component4();
    method public com.jarvis.core.internal.designsystem.component.AbsolutePixelPadding copy(float start, float end, float top, float bottom);
    method public float getBottom();
    method public float getEnd();
    method public float getStart();
    method public float getTop();
    property public final float bottom;
    property public final float end;
    property public final float start;
    property public final float top;
    field public static final com.jarvis.core.internal.designsystem.component.AbsolutePixelPadding.Companion Companion;
  }

  public static final class AbsolutePixelPadding.Companion {
    method @androidx.compose.runtime.Composable public com.jarvis.core.internal.designsystem.component.AbsolutePixelPadding fromPaddingValues(androidx.compose.foundation.layout.PaddingValues paddingValues);
    method public com.jarvis.core.internal.designsystem.component.AbsolutePixelPadding getZero();
    property public final com.jarvis.core.internal.designsystem.component.AbsolutePixelPadding Zero;
  }

  public final class CollectionScrollPadding {
    ctor public CollectionScrollPadding(float start, float end);
    method public float component1();
    method public float component2();
    method public com.jarvis.core.internal.designsystem.component.CollectionScrollPadding copy(float start, float end);
    method public float getEnd();
    method public float getStart();
    property public final float end;
    property public final float start;
    field public static final com.jarvis.core.internal.designsystem.component.CollectionScrollPadding.Companion Companion;
  }

  public static final class CollectionScrollPadding.Companion {
    method public com.jarvis.core.internal.designsystem.component.CollectionScrollPadding fromAbsolutePixelPadding(androidx.compose.foundation.gestures.Orientation orientation, com.jarvis.core.internal.designsystem.component.AbsolutePixelPadding padding, boolean reverseLayout);
    method public com.jarvis.core.internal.designsystem.component.CollectionScrollPadding getZero();
    property public final com.jarvis.core.internal.designsystem.component.CollectionScrollPadding Zero;
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public final class DSBackgroundKt {
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(showBackground=true) public static void BackgroundDefault();
    method @androidx.compose.runtime.Composable public static void DSBackground(optional androidx.compose.ui.Modifier modifier, kotlin.jvm.functions.Function0<kotlin.Unit> content);
    method @androidx.compose.runtime.Composable public static void DSGradientBackground(optional androidx.compose.ui.Modifier modifier, optional com.jarvis.core.internal.designsystem.theme.DSGradientColors gradientColors, kotlin.jvm.functions.Function0<kotlin.Unit> content);
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(showBackground=true) public static void GradientBackgroundDefault();
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public final class DSBottomSheetKt {
    method @androidx.compose.runtime.Composable public static void DSBottomSheet(kotlin.jvm.functions.Function0<kotlin.Unit> onDismissRequest, kotlin.jvm.functions.Function0<kotlin.Unit> title, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.ColumnScope,kotlin.Unit> content, optional androidx.compose.ui.Modifier modifier, optional kotlin.jvm.functions.Function0<kotlin.Unit> confirmButton, optional kotlin.jvm.functions.Function0<kotlin.Unit> dismissButton, optional long containerColor, optional kotlin.jvm.functions.Function0<kotlin.Unit>? dragHandle, optional androidx.compose.foundation.layout.WindowInsets windowInsets);
    method @androidx.compose.runtime.Composable public static void DSBottomSheet(kotlin.jvm.functions.Function0<kotlin.Unit> onDismissRequest, kotlin.jvm.functions.Function0<kotlin.Unit> title, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.ColumnScope,kotlin.Unit> content, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.ColumnScope,kotlin.Unit> buttons, optional androidx.compose.ui.Modifier modifier, optional long containerColor, optional kotlin.jvm.functions.Function0<kotlin.Unit>? dragHandle, optional androidx.compose.foundation.layout.WindowInsets windowInsets);
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public final class DSButtonKt {
    method @androidx.compose.runtime.Composable public static void DSButton(String text, optional androidx.compose.ui.Modifier modifier, optional com.jarvis.core.internal.designsystem.component.DSButtonStyle style, optional com.jarvis.core.internal.designsystem.component.DSButtonSize size, optional androidx.compose.ui.graphics.Color? textColor, optional androidx.compose.ui.unit.Dp? elevation, optional boolean disabled, optional boolean isLoading, optional androidx.compose.ui.graphics.vector.ImageVector? leadingIcon, optional androidx.compose.ui.graphics.vector.ImageVector? trailingIcon, kotlin.jvm.functions.Function0<kotlin.Unit> onClick);
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(showBackground=true, name="All DSButton styles - Dark", uiMode=android.content.res.Configuration.UI_MODE_NIGHT_YES) public static void DSButtonDarkPreview();
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(showBackground=true, name="All DSButton styles") public static void DSButtonPreview();
  }

  public enum DSButtonSize {
    method @androidx.compose.runtime.Composable public final androidx.compose.foundation.shape.CornerBasedShape getCornerRadius();
    method @androidx.compose.runtime.Composable public final float getHeight();
    method public static com.jarvis.core.internal.designsystem.component.DSButtonSize valueOf(String value) throws java.lang.IllegalArgumentException, java.lang.NullPointerException;
    method public static com.jarvis.core.internal.designsystem.component.DSButtonSize[] values();
    property @androidx.compose.runtime.Composable public final androidx.compose.foundation.shape.CornerBasedShape cornerRadius;
    property @androidx.compose.runtime.Composable public final float height;
    enum_constant public static final com.jarvis.core.internal.designsystem.component.DSButtonSize EXTRA_SMALL;
    enum_constant public static final com.jarvis.core.internal.designsystem.component.DSButtonSize LARGE;
    enum_constant public static final com.jarvis.core.internal.designsystem.component.DSButtonSize MEDIUM;
    enum_constant public static final com.jarvis.core.internal.designsystem.component.DSButtonSize SMALL;
  }

  public enum DSButtonStyle {
    method public static com.jarvis.core.internal.designsystem.component.DSButtonStyle valueOf(String value) throws java.lang.IllegalArgumentException, java.lang.NullPointerException;
    method public static com.jarvis.core.internal.designsystem.component.DSButtonStyle[] values();
    enum_constant public static final com.jarvis.core.internal.designsystem.component.DSButtonStyle LINK;
    enum_constant public static final com.jarvis.core.internal.designsystem.component.DSButtonStyle OUTLINE;
    enum_constant public static final com.jarvis.core.internal.designsystem.component.DSButtonStyle PRIMARY;
    enum_constant public static final com.jarvis.core.internal.designsystem.component.DSButtonStyle SECONDARY;
    enum_constant public static final com.jarvis.core.internal.designsystem.component.DSButtonStyle TEXT;
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public final class DSCardKt {
    method @androidx.compose.runtime.Composable public static void DSCard(optional androidx.compose.ui.Modifier modifier, optional androidx.compose.foundation.shape.CornerBasedShape shape, optional long color, optional float elevation, optional androidx.compose.foundation.BorderStroke? border, optional boolean isDisabled, optional boolean parallaxEnabled, optional float parallaxMaxTiltDeg, optional float parallaxMaxShift, optional float parallaxReturnStiffness, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.ColumnScope,kotlin.Unit> content);
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public final class DSCheckBoxKt {
    method @androidx.compose.runtime.Composable public static void DSCheckBox(boolean checked, optional androidx.compose.ui.Modifier modifier, optional boolean isInvalid, optional boolean isDisabled, kotlin.jvm.functions.Function1<? super java.lang.Boolean,kotlin.Unit> onCheckedChange, optional kotlin.jvm.functions.Function0<kotlin.Unit>? label);
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(showBackground=true, name="All DSCheckBox states") public static void DSCheckBoxPreview();
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public final class DSChoiceGroupKt {
    method @androidx.compose.runtime.Composable public static <T> void DSChoiceGroup(java.util.List<? extends T> options, T? selectedOption, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> onOptionSelected, optional androidx.compose.ui.Modifier modifier, optional boolean isHorizontal, kotlin.jvm.functions.Function3<? super T,? super java.lang.Boolean,? super kotlin.jvm.functions.Function0<kotlin.Unit>,kotlin.Unit> itemContent);
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(showBackground=true, name="DSChoiceGroup with checkbox horizontal") public static void DSChoiceGroupWithCheckBoxHorizontalPreview();
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(showBackground=true, name="DSChoiceGroup with checkbox vertical") public static void DSChoiceGroupWithCheckBoxVerticalPreview();
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(showBackground=true, name="DSChoiceGroup with Radio horizontal") public static void DSChoiceGroupWithRadioHorizontalPreview();
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(showBackground=true, name="DSChoiceGroup with Radio vertical") public static void DSChoiceGroupWithRadioVerticalPreview();
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public final class DSCircularProgressIndicatorKt {
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(showBackground=true, name="DS Circular Progress Indicator") public static void CircularProgressIndicatorPreview();
    method @androidx.compose.runtime.Composable public static void DSCircularProgressIndicator(optional androidx.compose.ui.Modifier modifier, optional long color, optional float strokeWidth);
  }

  public final class DSDatePickerAppearance {
    ctor public DSDatePickerAppearance(long titleColor, long placeholderColor, long backgroundColor, long errorColor, long borderColor, long focusedBorderColor, long textColor, long disabledBackgroundColor, long disabledColor, long disabledTextColor, long mandatoryIndicatorColor, androidx.compose.ui.text.TextStyle titleFont, androidx.compose.ui.text.TextStyle placeholderFont, androidx.compose.ui.text.TextStyle errorFont, float borderWidth, float focusedBorderWidth, androidx.compose.foundation.shape.CornerBasedShape cornerRadius, androidx.compose.ui.graphics.vector.ImageVector expandableIcon, androidx.compose.ui.graphics.vector.ImageVector collapseIcon);
    method public long component1-0d7_KjU();
    method public long component10-0d7_KjU();
    method public long component11-0d7_KjU();
    method public androidx.compose.ui.text.TextStyle component12();
    method public androidx.compose.ui.text.TextStyle component13();
    method public androidx.compose.ui.text.TextStyle component14();
    method public float component15-D9Ej5fM();
    method public float component16-D9Ej5fM();
    method public androidx.compose.foundation.shape.CornerBasedShape component17();
    method public androidx.compose.ui.graphics.vector.ImageVector component18();
    method public androidx.compose.ui.graphics.vector.ImageVector component19();
    method public long component2-0d7_KjU();
    method public long component3-0d7_KjU();
    method public long component4-0d7_KjU();
    method public long component5-0d7_KjU();
    method public long component6-0d7_KjU();
    method public long component7-0d7_KjU();
    method public long component8-0d7_KjU();
    method public long component9-0d7_KjU();
    method public com.jarvis.core.internal.designsystem.component.DSDatePickerAppearance copy-DXMgmh4(long titleColor, long placeholderColor, long backgroundColor, long errorColor, long borderColor, long focusedBorderColor, long textColor, long disabledBackgroundColor, long disabledColor, long disabledTextColor, long mandatoryIndicatorColor, androidx.compose.ui.text.TextStyle titleFont, androidx.compose.ui.text.TextStyle placeholderFont, androidx.compose.ui.text.TextStyle errorFont, float borderWidth, float focusedBorderWidth, androidx.compose.foundation.shape.CornerBasedShape cornerRadius, androidx.compose.ui.graphics.vector.ImageVector expandableIcon, androidx.compose.ui.graphics.vector.ImageVector collapseIcon);
    method public long getBackgroundColor();
    method public long getBorderColor();
    method public float getBorderWidth();
    method public androidx.compose.ui.graphics.vector.ImageVector getCollapseIcon();
    method public androidx.compose.foundation.shape.CornerBasedShape getCornerRadius();
    method public long getDisabledBackgroundColor();
    method public long getDisabledColor();
    method public long getDisabledTextColor();
    method public long getErrorColor();
    method public androidx.compose.ui.text.TextStyle getErrorFont();
    method public androidx.compose.ui.graphics.vector.ImageVector getExpandableIcon();
    method public long getFocusedBorderColor();
    method public float getFocusedBorderWidth();
    method public long getMandatoryIndicatorColor();
    method public long getPlaceholderColor();
    method public androidx.compose.ui.text.TextStyle getPlaceholderFont();
    method public long getTextColor();
    method public long getTitleColor();
    method public androidx.compose.ui.text.TextStyle getTitleFont();
    property public final long backgroundColor;
    property public final long borderColor;
    property public final float borderWidth;
    property public final androidx.compose.ui.graphics.vector.ImageVector collapseIcon;
    property public final androidx.compose.foundation.shape.CornerBasedShape cornerRadius;
    property public final long disabledBackgroundColor;
    property public final long disabledColor;
    property public final long disabledTextColor;
    property public final long errorColor;
    property public final androidx.compose.ui.text.TextStyle errorFont;
    property public final androidx.compose.ui.graphics.vector.ImageVector expandableIcon;
    property public final long focusedBorderColor;
    property public final float focusedBorderWidth;
    property public final long mandatoryIndicatorColor;
    property public final long placeholderColor;
    property public final androidx.compose.ui.text.TextStyle placeholderFont;
    property public final long textColor;
    property public final long titleColor;
    property public final androidx.compose.ui.text.TextStyle titleFont;
    field public static final com.jarvis.core.internal.designsystem.component.DSDatePickerAppearance.Companion Companion;
  }

  public static final class DSDatePickerAppearance.Companion {
    method @androidx.compose.runtime.Composable public com.jarvis.core.internal.designsystem.component.DSDatePickerAppearance getDark();
    method @androidx.compose.runtime.Composable public com.jarvis.core.internal.designsystem.component.DSDatePickerAppearance getDefault();
    property @androidx.compose.runtime.Composable public final com.jarvis.core.internal.designsystem.component.DSDatePickerAppearance dark;
    property @androidx.compose.runtime.Composable public final com.jarvis.core.internal.designsystem.component.DSDatePickerAppearance default;
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public final class DSDatePickerKt {
    method @androidx.compose.runtime.Composable public static void DSDatePicker(optional androidx.compose.ui.Modifier modifier, optional java.util.Date? selectedDate, optional boolean isError, optional boolean isDisabled, optional com.jarvis.core.internal.designsystem.component.UiText? errorMessage, optional boolean isMandatory, optional kotlin.jvm.functions.Function0<kotlin.Unit>? leadingIcon, optional String? title, optional String? placeholder, optional com.jarvis.core.internal.designsystem.component.DSDatePickerAppearance appearance, optional kotlin.jvm.functions.Function1<? super java.util.Date,kotlin.Unit> onDateSelected);
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(showBackground=true, name="All DSDatePicker states") public static void DSDatePickerPreview();
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(showBackground=false, name="All Dark DSDatePicker states") public static void DSDatePickerPreviewDark();
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public final class DSDialogKt {
    method @androidx.compose.runtime.Composable public static void DSDialog(kotlin.jvm.functions.Function0<kotlin.Unit> onDismissRequest, kotlin.jvm.functions.Function0<kotlin.Unit> title, kotlin.jvm.functions.Function0<kotlin.Unit> text, kotlin.jvm.functions.Function0<kotlin.Unit> confirmButton, optional androidx.compose.ui.Modifier modifier, optional kotlin.jvm.functions.Function0<kotlin.Unit> dismissButton, optional androidx.compose.ui.window.DialogProperties properties);
    method @androidx.compose.runtime.Composable public static void DSDialog(kotlin.jvm.functions.Function0<kotlin.Unit> onDismissRequest, kotlin.jvm.functions.Function0<kotlin.Unit> title, kotlin.jvm.functions.Function0<kotlin.Unit> text, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.ColumnScope,kotlin.Unit> buttons, optional androidx.compose.ui.Modifier modifier, optional androidx.compose.ui.window.DialogProperties properties);
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public final class DSDrawerKt {
    method @androidx.compose.runtime.Composable public static void DSDrawer(kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.ColumnScope,kotlin.Unit> drawerContent, optional androidx.compose.ui.Modifier modifier, optional com.jarvis.core.internal.designsystem.component.DSDrawerState drawerState, optional boolean gesturesEnabled, optional long drawerBackgroundColor, optional long drawerContentColor, optional float contentCornerSize, optional long contentBackgroundColor, kotlin.jvm.functions.Function0<kotlin.Unit> content);
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(showBackground=true) public static void DSDrawerPreview();
    method @androidx.compose.runtime.Composable public static com.jarvis.core.internal.designsystem.component.DSDrawerState rememberDSDrawerState(com.jarvis.core.internal.designsystem.component.DSDrawerValue initialValue);
  }

  public final class DSDrawerState {
    ctor public DSDrawerState(com.jarvis.core.internal.designsystem.component.DSDrawerValue initialValue, androidx.compose.ui.unit.Density density);
    method public suspend Object? close(kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public com.jarvis.core.internal.designsystem.component.DSDrawerValue getCurrentValue();
    method public float getOffset();
    method public com.jarvis.core.internal.designsystem.component.DSDrawerValue getTargetValue();
    method public boolean isClosed();
    method public boolean isOpen();
    method public suspend Object? open(kotlin.coroutines.Continuation<? super kotlin.Unit>);
    property public final com.jarvis.core.internal.designsystem.component.DSDrawerValue currentValue;
    property public final boolean isClosed;
    property public final boolean isOpen;
    property public final float offset;
    property public final com.jarvis.core.internal.designsystem.component.DSDrawerValue targetValue;
  }

  public abstract sealed class DSDrawerValue {
  }

  public static final class DSDrawerValue.Closed extends com.jarvis.core.internal.designsystem.component.DSDrawerValue {
    field public static final com.jarvis.core.internal.designsystem.component.DSDrawerValue.Closed INSTANCE;
  }

  public static final class DSDrawerValue.Open extends com.jarvis.core.internal.designsystem.component.DSDrawerValue {
    field public static final com.jarvis.core.internal.designsystem.component.DSDrawerValue.Open INSTANCE;
  }

  public final class DSDropdownMenuItem {
    ctor public DSDropdownMenuItem(String text, kotlin.jvm.functions.Function0<kotlin.Unit> onClick, optional androidx.compose.ui.graphics.vector.ImageVector? icon, optional androidx.compose.ui.graphics.Color? iconTint, optional androidx.compose.ui.graphics.Color? textColor, optional boolean enabled);
    method public String component1();
    method public kotlin.jvm.functions.Function0<kotlin.Unit> component2();
    method public androidx.compose.ui.graphics.vector.ImageVector? component3();
    method public androidx.compose.ui.graphics.Color? component4-QN2ZGVo();
    method public androidx.compose.ui.graphics.Color? component5-QN2ZGVo();
    method public boolean component6();
    method public com.jarvis.core.internal.designsystem.component.DSDropdownMenuItem copy-pIatTEM(String text, kotlin.jvm.functions.Function0<kotlin.Unit> onClick, androidx.compose.ui.graphics.vector.ImageVector? icon, androidx.compose.ui.graphics.Color? iconTint, androidx.compose.ui.graphics.Color? textColor, boolean enabled);
    method public boolean getEnabled();
    method public androidx.compose.ui.graphics.vector.ImageVector? getIcon();
    method public androidx.compose.ui.graphics.Color? getIconTint();
    method public kotlin.jvm.functions.Function0<kotlin.Unit> getOnClick();
    method public String getText();
    method public androidx.compose.ui.graphics.Color? getTextColor();
    property public final boolean enabled;
    property public final androidx.compose.ui.graphics.vector.ImageVector? icon;
    property public final androidx.compose.ui.graphics.Color? iconTint;
    property public final kotlin.jvm.functions.Function0<kotlin.Unit> onClick;
    property public final String text;
    property public final androidx.compose.ui.graphics.Color? textColor;
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public final class DSDropdownMenuKt {
    method @androidx.compose.runtime.Composable public static void DSDropdownMenu(boolean expanded, kotlin.jvm.functions.Function0<kotlin.Unit> onDismissRequest, java.util.List<com.jarvis.core.internal.designsystem.component.DSDropdownMenuItem> items, optional androidx.compose.ui.Modifier modifier, optional long backgroundColor);
    method @androidx.compose.runtime.Composable public static void DSThreeDotsMenu(java.util.List<com.jarvis.core.internal.designsystem.component.DSDropdownMenuItem> items, optional androidx.compose.ui.Modifier modifier, optional long iconTint, optional long backgroundColor);
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public final class DSFilterChipKt {
    method @androidx.compose.runtime.Composable public static void DSFilterChip(boolean selected, kotlin.jvm.functions.Function0<kotlin.Unit> onClick, String label, optional androidx.compose.ui.Modifier modifier, optional boolean enabled, optional androidx.compose.ui.graphics.Brush? selectedGradient);
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(showBackground=true) public static void DSFilterChipDisabledPreview();
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(showBackground=true) public static void DSFilterChipSelectedPreview();
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(showBackground=true) public static void DSFilterChipUnselectedPreview();
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public final class DSFlagKt {
    method @androidx.compose.runtime.Composable public static void DSFlag(optional androidx.compose.ui.Modifier modifier, optional String? title, optional String? description, optional com.jarvis.core.internal.designsystem.component.FlagStyle? style, optional boolean closable, optional kotlin.jvm.functions.Function0<kotlin.Unit>? content);
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(showBackground=true, name="All DSFlag styles") public static void DSFlagPreviews();
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public final class DSIconButtonKt {
    method @androidx.compose.runtime.Composable public static void DSIconButton(kotlin.jvm.functions.Function0<kotlin.Unit> onClick, androidx.compose.ui.graphics.vector.ImageVector imageVector, String? contentDescription, optional androidx.compose.ui.Modifier modifier, optional com.jarvis.core.internal.designsystem.component.DSIconTint tint, optional boolean enabled);
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(showBackground=true) public static void DSIconButtonDisabledPreview();
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(showBackground=true) public static void DSIconButtonPreview();
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public final class DSIconKt {
    method @androidx.compose.runtime.Composable public static void DSIcon(androidx.compose.ui.graphics.ImageBitmap bitmap, optional androidx.compose.ui.Modifier modifier, optional String? contentDescription, optional androidx.compose.ui.unit.Dp? size, optional com.jarvis.core.internal.designsystem.component.DSIconTint tint);
    method @androidx.compose.runtime.Composable public static void DSIcon(androidx.compose.ui.graphics.painter.Painter painter, String? contentDescription, optional androidx.compose.ui.Modifier modifier, optional androidx.compose.ui.unit.Dp? size, optional com.jarvis.core.internal.designsystem.component.DSIconTint tint);
    method @androidx.compose.runtime.Composable public static void DSIcon(androidx.compose.ui.graphics.vector.ImageVector imageVector, optional androidx.compose.ui.Modifier modifier, optional String? contentDescription, optional androidx.compose.ui.unit.Dp? size, optional com.jarvis.core.internal.designsystem.component.DSIconTint tint);
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(showBackground=true, name="Icons previews") public static void IconPreview();
    method @androidx.compose.runtime.Composable public static androidx.compose.ui.graphics.Brush rememberJarvisPrimaryGradient();
  }

  @androidx.compose.runtime.Immutable public sealed interface DSIconTint {
  }

  public static final class DSIconTint.Gradient implements com.jarvis.core.internal.designsystem.component.DSIconTint {
    ctor public DSIconTint.Gradient(androidx.compose.ui.graphics.Brush brush, optional int blendMode);
    method public androidx.compose.ui.graphics.Brush component1();
    method public int component2-0nO6VwU();
    method public com.jarvis.core.internal.designsystem.component.DSIconTint.Gradient copy-GB0RdKg(androidx.compose.ui.graphics.Brush brush, int blendMode);
    method public int getBlendMode();
    method public androidx.compose.ui.graphics.Brush getBrush();
    property public final int blendMode;
    property public final androidx.compose.ui.graphics.Brush brush;
  }

  public static final class DSIconTint.Solid implements com.jarvis.core.internal.designsystem.component.DSIconTint {
    ctor public DSIconTint.Solid(long color);
    method public long component1-0d7_KjU();
    method public com.jarvis.core.internal.designsystem.component.DSIconTint.Solid copy-8_81llA(long color);
    method public long getColor();
    property public final long color;
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public final class DSInlineLoadingKt {
    method @androidx.compose.runtime.Composable public static void DSInlineLoading(optional androidx.compose.ui.Modifier modifier, optional float circleSize, optional float circleDistance);
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(showBackground=true, name="InlineLoading") public static void InlineLoadingPreview();
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public final class DSJarvisAnimationKt {
    method @androidx.compose.runtime.Composable public static void DSJarvisAnimation(optional androidx.compose.ui.Modifier modifier, optional float size, optional boolean enabled, optional boolean showWaveAnimation, optional boolean showRingsAnimation, optional boolean triggerLetterAnimation);
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(showBackground=true, name="Animated (run app to see)") public static void DSJarvisAnimationAnimatedPreview();
    method @androidx.compose.runtime.Composable public static void DSJarvisAnimationLetters(optional androidx.compose.ui.Modifier modifier, optional androidx.compose.ui.text.TextStyle style, optional int durationPerFlip, optional int staggerPerLetter, optional int cyclePauseMillis, optional float extraSpaceBetweenLettersDp, optional boolean rightToLeft, optional boolean enabled);
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(showBackground=true, name="Rings Frozen") public static void DSJarvisAnimationRingsFrozenPreview();
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(showBackground=true, name="Letter Animation") public static void DSJarvisAnimationsLetterPreview();
    method @androidx.compose.runtime.Composable public static void DSJarvisRingsRealtime(optional float size, optional java.util.List<java.lang.Float> periodsMs, optional java.util.List<java.lang.Integer> layerIds, optional long viewport, optional long pivotInViewport, optional float contentScale, optional long frameStepNanos, optional boolean rotating);
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public final class DSLinearProgressIndicatorKt {
    method @androidx.compose.runtime.Composable public static void DSLinearProgressIndicator(@FloatRange(from=0.0, to=1.0) float progress, optional androidx.compose.ui.Modifier modifier, optional long color, optional long backgroundColor, optional androidx.compose.animation.core.AnimationSpec<java.lang.Float> progressAnimationSpec);
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(showBackground=true, name="DS Linear Progress Indicator") public static void LinearProgressIndicatorPreview();
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public final class DSNavigationBarKt {
    method @androidx.compose.runtime.Composable public static void DSNavigationBar(optional androidx.compose.ui.Modifier modifier, optional float topCornerRadius, optional long containerColor, optional long contentColor, optional float tonalElevation, optional long scrollDownBackgroundColor, optional long defaultBackgroundColor, optional boolean enableScrollColorChange, optional boolean isScrolledDown, kotlin.jvm.functions.Function1<? super androidx.compose.foundation.layout.RowScope,kotlin.Unit> content);
    method @androidx.compose.runtime.Composable public static void DSNavigationBarItem(androidx.compose.foundation.layout.RowScope, boolean selected, kotlin.jvm.functions.Function0<kotlin.Unit> onClick, optional androidx.compose.ui.Modifier modifier, optional boolean enabled, optional boolean alwaysShowLabel, kotlin.jvm.functions.Function0<kotlin.Unit> icon, optional kotlin.jvm.functions.Function0<kotlin.Unit> selectedIcon, optional kotlin.jvm.functions.Function0<kotlin.Unit>? label, optional boolean scaleOnSelected, optional float selectedScale, optional boolean fadeOnChange, optional int fadeDurationMillis);
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview public static void DSNavigationBarPreview();
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public final class DSPullToRefreshKt {
    method @androidx.compose.runtime.Composable public static void DSPullToRefresh(boolean isRefreshing, kotlin.jvm.functions.Function0<kotlin.Unit> onRefresh, optional androidx.compose.ui.Modifier modifier, kotlin.jvm.functions.Function0<kotlin.Unit> content);
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public final class DSRadioKt {
    method @androidx.compose.runtime.Composable public static void DSRadio(boolean selected, optional androidx.compose.ui.Modifier modifier, optional boolean isInvalid, optional boolean isDisabled, kotlin.jvm.functions.Function1<? super java.lang.Boolean,kotlin.Unit> onSelectedChange, optional kotlin.jvm.functions.Function0<kotlin.Unit>? label);
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(showBackground=true, name="DSRadio") public static void DSRadioPreview();
  }

  @androidx.compose.runtime.Stable public interface DSReorderableCollectionItemScope {
    method public androidx.compose.ui.Modifier draggableHandle(androidx.compose.ui.Modifier, optional boolean enabled, optional androidx.compose.foundation.interaction.MutableInteractionSource? interactionSource, optional kotlin.jvm.functions.Function1<? super androidx.compose.ui.geometry.Offset,kotlin.Unit> onDragStarted, optional kotlin.jvm.functions.Function0<kotlin.Unit> onDragStopped, optional com.jarvis.core.internal.designsystem.utils.DragGestureDetector dragGestureDetector);
    method public androidx.compose.ui.Modifier longPressDraggableHandle(androidx.compose.ui.Modifier, optional boolean enabled, optional androidx.compose.foundation.interaction.MutableInteractionSource? interactionSource, optional kotlin.jvm.functions.Function1<? super androidx.compose.ui.geometry.Offset,kotlin.Unit> onDragStarted, optional kotlin.jvm.functions.Function0<kotlin.Unit> onDragStopped);
  }

  public final class DSReorderableColumnScope extends com.jarvis.core.internal.designsystem.component.DSReorderableListScope implements androidx.compose.foundation.layout.ColumnScope {
    ctor public DSReorderableColumnScope(com.jarvis.core.internal.designsystem.component.DSReorderableListState state, int index, boolean isAnimating, androidx.compose.foundation.layout.ColumnScope scope);
  }

  public final class DSReorderableLazyCollectionDefaults {
    method public float getScrollThreshold();
    property public final float ScrollThreshold;
    field public static final com.jarvis.core.internal.designsystem.component.DSReorderableLazyCollectionDefaults INSTANCE;
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public final class DSReorderableLazyCollectionKt {
    method @androidx.compose.runtime.Composable public static void DSReorderableCollectionItem(com.jarvis.core.internal.designsystem.component.DSReorderableLazyCollectionState<?> state, Object key, optional androidx.compose.ui.Modifier modifier, optional boolean enabled, boolean dragging, kotlin.jvm.functions.Function2<? super com.jarvis.core.internal.designsystem.component.DSReorderableCollectionItemScope,? super java.lang.Boolean,kotlin.Unit> content);
    field public static final float ScrollAmountMultiplier = 0.05f;
  }

  @androidx.compose.runtime.Stable public class DSReorderableLazyCollectionState<T> implements com.jarvis.core.internal.designsystem.component.ReorderableLazyCollectionStateInterface {
    method public boolean isAnyItemDragging();
    property public boolean isAnyItemDragging;
    field public static final com.jarvis.core.internal.designsystem.component.DSReorderableLazyCollectionState.Companion Companion;
    field public static final long MoveItemsLayoutInfoUpdateMaxWaitDuration = 1000L; // 0x3e8L
  }

  public static final class DSReorderableLazyCollectionState.Companion {
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public final class DSReorderableLazyGridKt {
    method @androidx.compose.runtime.Composable public static void DSReorderableItem(androidx.compose.foundation.lazy.grid.LazyGridItemScope, com.jarvis.core.internal.designsystem.component.DSReorderableLazyGridState state, Object key, optional androidx.compose.ui.Modifier modifier, optional boolean enabled, optional androidx.compose.ui.Modifier animateItemModifier, kotlin.jvm.functions.Function2<? super com.jarvis.core.internal.designsystem.component.DSReorderableCollectionItemScope,? super java.lang.Boolean,kotlin.Unit> content);
    method @androidx.compose.runtime.Composable public static com.jarvis.core.internal.designsystem.component.DSReorderableLazyGridState rememberReorderableLazyGridState(androidx.compose.foundation.lazy.grid.LazyGridState lazyGridState, optional androidx.compose.foundation.layout.PaddingValues scrollThresholdPadding, optional float scrollThreshold, optional com.jarvis.core.internal.designsystem.utils.DSScroller DSScroller, optional com.jarvis.core.internal.designsystem.component.ScrollMoveMode scrollMoveMode, kotlin.jvm.functions.Function4<? super kotlinx.coroutines.CoroutineScope,? super androidx.compose.foundation.lazy.grid.LazyGridItemInfo,? super androidx.compose.foundation.lazy.grid.LazyGridItemInfo,? super kotlin.coroutines.Continuation<? super kotlin.Unit>,?> onMove);
  }

  @androidx.compose.runtime.Stable public final class DSReorderableLazyGridState extends com.jarvis.core.internal.designsystem.component.DSReorderableLazyCollectionState<androidx.compose.foundation.lazy.grid.LazyGridItemInfo> {
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public final class DSReorderableLazyListKt {
    method @androidx.compose.runtime.Composable public static void DSReorderableItem(androidx.compose.foundation.lazy.LazyItemScope, com.jarvis.core.internal.designsystem.component.ReorderableLazyListState state, Object key, optional androidx.compose.ui.Modifier modifier, optional boolean enabled, optional androidx.compose.ui.Modifier animateItemModifier, kotlin.jvm.functions.Function2<? super com.jarvis.core.internal.designsystem.component.DSReorderableCollectionItemScope,? super java.lang.Boolean,kotlin.Unit> content);
    method @Deprecated @androidx.compose.runtime.Composable public static com.jarvis.core.internal.designsystem.component.ReorderableLazyListState rememberReorderableLazyColumnState(androidx.compose.foundation.lazy.LazyListState lazyListState, optional androidx.compose.foundation.layout.PaddingValues scrollThresholdPadding, optional float scrollThreshold, optional com.jarvis.core.internal.designsystem.utils.DSScroller scroller, kotlin.jvm.functions.Function4<? super kotlinx.coroutines.CoroutineScope,? super androidx.compose.foundation.lazy.LazyListItemInfo,? super androidx.compose.foundation.lazy.LazyListItemInfo,? super kotlin.coroutines.Continuation<? super kotlin.Unit>,?> onMove);
    method @androidx.compose.runtime.Composable public static com.jarvis.core.internal.designsystem.component.ReorderableLazyListState rememberReorderableLazyListState(androidx.compose.foundation.lazy.LazyListState lazyListState, optional androidx.compose.foundation.layout.PaddingValues scrollThresholdPadding, optional float scrollThreshold, optional com.jarvis.core.internal.designsystem.utils.DSScroller scroller, kotlin.jvm.functions.Function4<? super kotlinx.coroutines.CoroutineScope,? super androidx.compose.foundation.lazy.LazyListItemInfo,? super androidx.compose.foundation.lazy.LazyListItemInfo,? super kotlin.coroutines.Continuation<? super kotlin.Unit>,?> onMove);
    method @Deprecated @androidx.compose.runtime.Composable public static com.jarvis.core.internal.designsystem.component.ReorderableLazyListState rememberReorderableLazyRowState(androidx.compose.foundation.lazy.LazyListState lazyListState, optional androidx.compose.foundation.layout.PaddingValues scrollThresholdPadding, optional float scrollThreshold, optional com.jarvis.core.internal.designsystem.utils.DSScroller scroller, kotlin.jvm.functions.Function4<? super kotlinx.coroutines.CoroutineScope,? super androidx.compose.foundation.lazy.LazyListItemInfo,? super androidx.compose.foundation.lazy.LazyListItemInfo,? super kotlin.coroutines.Continuation<? super kotlin.Unit>,?> onMove);
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public final class DSReorderableLazyStaggeredGridKt {
    method @androidx.compose.runtime.Composable public static void DSReorderableItem(androidx.compose.foundation.lazy.staggeredgrid.LazyStaggeredGridItemScope, com.jarvis.core.internal.designsystem.component.DSReorderableLazyStaggeredGridState state, Object key, optional androidx.compose.ui.Modifier modifier, optional boolean enabled, optional androidx.compose.ui.Modifier animateItemModifier, kotlin.jvm.functions.Function2<? super com.jarvis.core.internal.designsystem.component.DSReorderableCollectionItemScope,? super java.lang.Boolean,kotlin.Unit> content);
    method @androidx.compose.runtime.Composable public static com.jarvis.core.internal.designsystem.component.DSReorderableLazyStaggeredGridState rememberReorderableLazyStaggeredGridState(androidx.compose.foundation.lazy.staggeredgrid.LazyStaggeredGridState lazyStaggeredGridState, optional androidx.compose.foundation.layout.PaddingValues scrollThresholdPadding, optional float scrollThreshold, optional com.jarvis.core.internal.designsystem.utils.DSScroller DSScroller, optional com.jarvis.core.internal.designsystem.component.ScrollMoveMode scrollMoveMode, kotlin.jvm.functions.Function4<? super kotlinx.coroutines.CoroutineScope,? super androidx.compose.foundation.lazy.staggeredgrid.LazyStaggeredGridItemInfo,? super androidx.compose.foundation.lazy.staggeredgrid.LazyStaggeredGridItemInfo,? super kotlin.coroutines.Continuation<? super kotlin.Unit>,?> onMove);
  }

  @androidx.compose.runtime.Stable public final class DSReorderableLazyStaggeredGridState extends com.jarvis.core.internal.designsystem.component.DSReorderableLazyCollectionState<androidx.compose.foundation.lazy.staggeredgrid.LazyStaggeredGridItemInfo> {
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public final class DSReorderableListKt {
    method @androidx.compose.runtime.Composable public static <T> void DSReorderableColumn(java.util.List<? extends T> list, kotlin.jvm.functions.Function2<? super java.lang.Integer,? super java.lang.Integer,kotlin.Unit> onSettle, optional androidx.compose.ui.Modifier modifier, optional androidx.compose.foundation.layout.Arrangement.Vertical verticalArrangement, optional androidx.compose.ui.Alignment.Horizontal horizontalAlignment, optional kotlin.jvm.functions.Function0<kotlin.Unit> onMove, kotlin.jvm.functions.Function4<? super com.jarvis.core.internal.designsystem.component.DSReorderableColumnScope,? super java.lang.Integer,? super T,? super java.lang.Boolean,kotlin.Unit> content);
    method @androidx.compose.runtime.Composable public static <T> void DSReorderableRow(java.util.List<? extends T> list, kotlin.jvm.functions.Function2<? super java.lang.Integer,? super java.lang.Integer,kotlin.Unit> onSettle, optional androidx.compose.ui.Modifier modifier, optional androidx.compose.foundation.layout.Arrangement.Horizontal horizontalArrangement, optional androidx.compose.ui.Alignment.Vertical verticalAlignment, optional kotlin.jvm.functions.Function0<kotlin.Unit> onMove, kotlin.jvm.functions.Function4<? super com.jarvis.core.internal.designsystem.component.DSReorderableRowScope,? super java.lang.Integer,? super T,? super java.lang.Boolean,kotlin.Unit> content);
  }

  public class DSReorderableListScope {
    ctor public DSReorderableListScope(com.jarvis.core.internal.designsystem.component.DSReorderableListState state, androidx.compose.foundation.gestures.Orientation orientation, int index, boolean isAnimating);
  }

  public final class DSReorderableListState {
    method public androidx.compose.foundation.gestures.Orientation getOrientation();
    property public final androidx.compose.foundation.gestures.Orientation orientation;
  }

  public final class DSReorderableRowScope extends com.jarvis.core.internal.designsystem.component.DSReorderableListScope implements androidx.compose.foundation.layout.RowScope {
    ctor public DSReorderableRowScope(com.jarvis.core.internal.designsystem.component.DSReorderableListState state, int index, boolean isAnimating, androidx.compose.foundation.layout.RowScope scope);
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public final class DSScrollStateControllerKt {
    method @androidx.compose.runtime.Composable public static kotlin.Pair<com.jarvis.core.internal.designsystem.component.ScrollState,androidx.compose.ui.input.nestedscroll.NestedScrollConnection> rememberScrollStateController(optional float scrollUpThreshold, optional float scrollDownThreshold);
    method @androidx.compose.runtime.Composable public static kotlin.Pair<com.jarvis.core.internal.designsystem.component.ScrollState,androidx.compose.ui.input.nestedscroll.NestedScrollConnection> rememberSimpleScrollStateController(optional float threshold);
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public final class DSSearchBarKt {
    method @androidx.compose.runtime.Composable public static void DSSearchBar(optional androidx.compose.ui.Modifier modifier, String searchText, kotlin.jvm.functions.Function1<? super java.lang.String,kotlin.Unit> onValueChange, optional String placeholder, kotlin.jvm.functions.Function0<kotlin.Unit> onTextClean);
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(showBackground=true) public static void DSSearchBarPreview();
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public final class DSSearchableJsonViewerKt {
    method @androidx.compose.runtime.Composable public static void DSSearchableJsonViewer(String jsonContent, optional androidx.compose.ui.Modifier modifier, optional int maxLines, optional kotlin.jvm.functions.Function0<kotlin.Unit>? onSearchRequested);
    method @androidx.compose.runtime.Composable public static void DSSearchableJsonViewerDialog(String jsonContent, optional androidx.compose.ui.Modifier modifier, optional String title, kotlin.jvm.functions.Function0<kotlin.Unit> onDismiss);
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public final class DSSelectFieldKt {
    method @androidx.compose.runtime.Composable public static <T> void DSSelectField(java.util.List<? extends T> options, T? selectedOption, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> onSelectionChange, kotlin.jvm.functions.Function1<? super T,java.lang.String> displayText, optional androidx.compose.ui.Modifier modifier, optional String? label, optional String placeholder, optional boolean enabled);
    method @androidx.compose.runtime.Composable public static void DSSelectField(java.util.List<java.lang.String> options, String? selectedOption, kotlin.jvm.functions.Function1<? super java.lang.String,kotlin.Unit> onSelectionChange, optional androidx.compose.ui.Modifier modifier, optional String? label, optional String placeholder, optional boolean enabled);
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public final class DSSwitchKt {
    method @androidx.compose.runtime.Composable public static void DSSwitch(boolean checked, optional androidx.compose.ui.Modifier modifier, optional boolean isInvalid, optional boolean isDisabled, kotlin.jvm.functions.Function1<? super java.lang.Boolean,kotlin.Unit> onCheckedChange, optional kotlin.jvm.functions.Function0<kotlin.Unit>? label);
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(showBackground=true, name="DSSwitch") public static void DSSwitchPreview();
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public final class DSTabBarKt {
    method @androidx.compose.runtime.Composable public static void DSTabBar(int selectedTabIndex, int tabCount, kotlin.jvm.functions.Function1<? super java.lang.Integer,kotlin.Unit> onTabSelected, optional androidx.compose.ui.Modifier modifier, optional long backgroundColor, optional long indicatorColor, kotlin.jvm.functions.Function2<? super java.lang.Integer,? super java.lang.Boolean,kotlin.Unit> tabContent);
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public final class DSTagKt {
    method @androidx.compose.runtime.Composable public static void DSTag(optional androidx.compose.ui.Modifier modifier, optional androidx.compose.ui.graphics.vector.ImageVector? icon, String tag, optional com.jarvis.core.internal.designsystem.component.DSTagStyle style);
    method @androidx.compose.runtime.Composable public static void DSTag(optional androidx.compose.ui.Modifier modifier, optional androidx.compose.ui.graphics.vector.ImageVector? icon, String tag, long backgroundColor, long tagTextColor, long iconColor, optional androidx.compose.ui.text.TextStyle tagTextStyle, optional androidx.compose.foundation.shape.RoundedCornerShape shape);
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(showBackground=true, name="Tag with all styles") public static void DSTagPreview();
  }

  public enum DSTagStyle {
    method @androidx.compose.runtime.Composable public final androidx.compose.foundation.shape.RoundedCornerShape getCorners();
    method @androidx.compose.runtime.Composable public final androidx.compose.ui.text.TextStyle getFontStyle();
    method public static com.jarvis.core.internal.designsystem.component.DSTagStyle valueOf(String value) throws java.lang.IllegalArgumentException, java.lang.NullPointerException;
    method public static com.jarvis.core.internal.designsystem.component.DSTagStyle[] values();
    property @androidx.compose.runtime.Composable public final androidx.compose.foundation.shape.RoundedCornerShape corners;
    property @androidx.compose.runtime.Composable public final androidx.compose.ui.text.TextStyle fontStyle;
    enum_constant public static final com.jarvis.core.internal.designsystem.component.DSTagStyle Info;
    enum_constant public static final com.jarvis.core.internal.designsystem.component.DSTagStyle Neutral;
    enum_constant public static final com.jarvis.core.internal.designsystem.component.DSTagStyle Success;
    enum_constant public static final com.jarvis.core.internal.designsystem.component.DSTagStyle Warning;
  }

  public final class DSTextFieldAppearance {
    ctor public DSTextFieldAppearance(long textColor, long titleColor, long placeholderTextColor, long disabledBackgroundColor, long disabledColor, long disabledTextColor, long backgroundColor, long errorTextColor, long trailingIconForegroundColor, long leadingIconForegroundColor, long borderColor, long focusedBorderColor, long mandatoryTextColor, androidx.compose.ui.text.TextStyle titleTextStyle, androidx.compose.ui.text.TextStyle errorTextStyle, androidx.compose.ui.text.TextStyle placeholderTextStyle, androidx.compose.ui.text.TextStyle mandatoryTextStyle, float borderWidth, float focusedBorderWidth, androidx.compose.foundation.shape.CornerBasedShape cornerRadius, boolean disableAutoCorrection, float textFieldHeight, int secureTextIconOpen, int secureTextIconClose);
    method public long component1-0d7_KjU();
    method public long component10-0d7_KjU();
    method public long component11-0d7_KjU();
    method public long component12-0d7_KjU();
    method public long component13-0d7_KjU();
    method public androidx.compose.ui.text.TextStyle component14();
    method public androidx.compose.ui.text.TextStyle component15();
    method public androidx.compose.ui.text.TextStyle component16();
    method public androidx.compose.ui.text.TextStyle component17();
    method public float component18-D9Ej5fM();
    method public float component19-D9Ej5fM();
    method public long component2-0d7_KjU();
    method public androidx.compose.foundation.shape.CornerBasedShape component20();
    method public boolean component21();
    method public float component22-D9Ej5fM();
    method public int component23();
    method public int component24();
    method public long component3-0d7_KjU();
    method public long component4-0d7_KjU();
    method public long component5-0d7_KjU();
    method public long component6-0d7_KjU();
    method public long component7-0d7_KjU();
    method public long component8-0d7_KjU();
    method public long component9-0d7_KjU();
    method public com.jarvis.core.internal.designsystem.component.DSTextFieldAppearance copy-Mwgn-DA(long textColor, long titleColor, long placeholderTextColor, long disabledBackgroundColor, long disabledColor, long disabledTextColor, long backgroundColor, long errorTextColor, long trailingIconForegroundColor, long leadingIconForegroundColor, long borderColor, long focusedBorderColor, long mandatoryTextColor, androidx.compose.ui.text.TextStyle titleTextStyle, androidx.compose.ui.text.TextStyle errorTextStyle, androidx.compose.ui.text.TextStyle placeholderTextStyle, androidx.compose.ui.text.TextStyle mandatoryTextStyle, float borderWidth, float focusedBorderWidth, androidx.compose.foundation.shape.CornerBasedShape cornerRadius, boolean disableAutoCorrection, float textFieldHeight, int secureTextIconOpen, int secureTextIconClose);
    method public long getBackgroundColor();
    method public long getBorderColor();
    method public float getBorderWidth();
    method public androidx.compose.foundation.shape.CornerBasedShape getCornerRadius();
    method public boolean getDisableAutoCorrection();
    method public long getDisabledBackgroundColor();
    method public long getDisabledColor();
    method public long getDisabledTextColor();
    method public long getErrorTextColor();
    method public androidx.compose.ui.text.TextStyle getErrorTextStyle();
    method public long getFocusedBorderColor();
    method public float getFocusedBorderWidth();
    method public long getLeadingIconForegroundColor();
    method public long getMandatoryTextColor();
    method public androidx.compose.ui.text.TextStyle getMandatoryTextStyle();
    method public long getPlaceholderTextColor();
    method public androidx.compose.ui.text.TextStyle getPlaceholderTextStyle();
    method public int getSecureTextIconClose();
    method public int getSecureTextIconOpen();
    method public long getTextColor();
    method public float getTextFieldHeight();
    method public long getTitleColor();
    method public androidx.compose.ui.text.TextStyle getTitleTextStyle();
    method public long getTrailingIconForegroundColor();
    property public final long backgroundColor;
    property public final long borderColor;
    property public final float borderWidth;
    property public final androidx.compose.foundation.shape.CornerBasedShape cornerRadius;
    property public final boolean disableAutoCorrection;
    property public final long disabledBackgroundColor;
    property public final long disabledColor;
    property public final long disabledTextColor;
    property public final long errorTextColor;
    property public final androidx.compose.ui.text.TextStyle errorTextStyle;
    property public final long focusedBorderColor;
    property public final float focusedBorderWidth;
    property public final long leadingIconForegroundColor;
    property public final long mandatoryTextColor;
    property public final androidx.compose.ui.text.TextStyle mandatoryTextStyle;
    property public final long placeholderTextColor;
    property public final androidx.compose.ui.text.TextStyle placeholderTextStyle;
    property public final int secureTextIconClose;
    property public final int secureTextIconOpen;
    property public final long textColor;
    property public final float textFieldHeight;
    property public final long titleColor;
    property public final androidx.compose.ui.text.TextStyle titleTextStyle;
    property public final long trailingIconForegroundColor;
    field public static final com.jarvis.core.internal.designsystem.component.DSTextFieldAppearance.Companion Companion;
  }

  public static final class DSTextFieldAppearance.Companion {
    method @androidx.compose.runtime.Composable public com.jarvis.core.internal.designsystem.component.DSTextFieldAppearance getDark();
    method @androidx.compose.runtime.Composable public com.jarvis.core.internal.designsystem.component.DSTextFieldAppearance getDefault();
    method @androidx.compose.runtime.Composable public com.jarvis.core.internal.designsystem.component.DSTextFieldAppearance getSelect();
    property @androidx.compose.runtime.Composable public final com.jarvis.core.internal.designsystem.component.DSTextFieldAppearance dark;
    property @androidx.compose.runtime.Composable public final com.jarvis.core.internal.designsystem.component.DSTextFieldAppearance default;
    property @androidx.compose.runtime.Composable public final com.jarvis.core.internal.designsystem.component.DSTextFieldAppearance select;
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public final class DSTextFieldKt {
    method @androidx.compose.runtime.Composable public static void DSTextField(optional androidx.compose.ui.Modifier modifier, optional String? title, String placeholder, optional String text, optional kotlin.jvm.functions.Function1<? super java.lang.String,kotlin.Unit> onValueChange, optional int keyboardType, optional int imeAction, optional androidx.compose.foundation.text.KeyboardActions keyboardActions, optional com.jarvis.core.internal.designsystem.component.UiText? errorMessage, optional boolean isError, optional boolean isDisabled, optional boolean isMandatory, optional kotlin.jvm.functions.Function0<kotlin.Unit>? leadingIcon, optional kotlin.jvm.functions.Function0<kotlin.Unit>? trailingIcon, optional boolean singleLine, optional int minLine, optional int maxLine, optional boolean isSecure, optional com.jarvis.core.internal.designsystem.component.DSTextFieldAppearance appearance);
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(showBackground=true, name="All DSTextField states") public static void DSTextFieldPreview();
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(showBackground=false, name="All DSTextField dark states") public static void DSTextFieldPreviewDark();
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public final class DSTextKt {
    method @androidx.compose.runtime.Composable public static void DSText(androidx.compose.ui.text.AnnotatedString text, optional androidx.compose.ui.Modifier modifier, optional long color, optional float emphasis, optional long fontSize, optional androidx.compose.ui.text.font.FontStyle? fontStyle, optional androidx.compose.ui.text.font.FontWeight? fontWeight, optional androidx.compose.ui.text.font.FontFamily? fontFamily, optional long letterSpacing, optional androidx.compose.ui.text.style.TextDecoration? textDecoration, optional int textAlign, optional long lineHeight, optional int overflow, optional boolean softWrap, optional int maxLines, optional int minLines, optional java.util.Map<java.lang.String,androidx.compose.foundation.text.InlineTextContent> inlineContent, optional kotlin.jvm.functions.Function1<? super androidx.compose.ui.text.TextLayoutResult,kotlin.Unit> onTextLayout, optional androidx.compose.ui.text.TextStyle style);
    method @androidx.compose.runtime.Composable public static void DSText(String text, optional androidx.compose.ui.Modifier modifier, optional long color, optional float emphasis, optional long fontSize, optional androidx.compose.ui.text.font.FontStyle? fontStyle, optional androidx.compose.ui.text.font.FontWeight? fontWeight, optional androidx.compose.ui.text.font.FontFamily? fontFamily, optional long letterSpacing, optional androidx.compose.ui.text.style.TextDecoration? textDecoration, optional int textAlign, optional long lineHeight, optional int overflow, optional boolean softWrap, optional int maxLines, optional int minLines, optional kotlin.jvm.functions.Function1<? super androidx.compose.ui.text.TextLayoutResult,kotlin.Unit> onTextLayout, optional androidx.compose.ui.text.TextStyle style);
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public final class DSToggleKt {
    method @androidx.compose.runtime.Composable public static void DSToggle(java.util.List<java.lang.String> options, String selectedOption, kotlin.jvm.functions.Function1<? super java.lang.String,kotlin.Unit> onOptionSelected, optional androidx.compose.ui.Modifier modifier);
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(showBackground=true, name="DSToggle Dynamic Width with BoxWithConstraints") public static void DSTogglePreview();
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public final class DSTopAppBarKt {
    method @androidx.compose.runtime.Composable public static void DSLargeTopAppBar(optional androidx.compose.ui.Modifier modifier, optional @StringRes Integer? titleRes, optional androidx.compose.ui.graphics.vector.ImageVector? navigationIcon, optional String? navigationIconContentDescription, optional androidx.compose.ui.graphics.vector.ImageVector? actionIcon, optional String? actionIconContentDescription, optional boolean dismissable, optional androidx.compose.material3.TopAppBarScrollBehavior? scrollBehavior, optional kotlin.jvm.functions.Function0<kotlin.Unit>? logo, optional float expandedLogoSize, optional float collapsedLogoSize, optional float logoSpacing, optional float collapseThreshold, optional long scrollUpBackgroundColor, optional long defaultBackgroundColor, optional boolean enableScrollColorChange, optional boolean isScrolledUp, optional kotlin.jvm.functions.Function0<kotlin.Unit> onBackClick, optional kotlin.jvm.functions.Function0<kotlin.Unit> onActionClick, optional kotlin.jvm.functions.Function0<kotlin.Unit> onDismiss);
    method @androidx.compose.runtime.Composable public static void DSMediumTopAppBar(optional androidx.compose.ui.Modifier modifier, optional @StringRes Integer? titleRes, optional androidx.compose.ui.graphics.vector.ImageVector? navigationIcon, optional String? navigationIconContentDescription, optional androidx.compose.ui.graphics.vector.ImageVector? actionIcon, optional String? actionIconContentDescription, optional boolean dismissable, optional androidx.compose.material3.TopAppBarScrollBehavior? scrollBehavior, optional kotlin.jvm.functions.Function0<kotlin.Unit>? logo, optional float expandedLogoSize, optional float collapsedLogoSize, optional float logoSpacing, optional float collapseThreshold, optional long scrollUpBackgroundColor, optional long defaultBackgroundColor, optional boolean enableScrollColorChange, optional boolean isScrolledUp, optional kotlin.jvm.functions.Function0<kotlin.Unit> onBackClick, optional kotlin.jvm.functions.Function0<kotlin.Unit> onActionClick, optional kotlin.jvm.functions.Function0<kotlin.Unit> onDismiss);
    method @androidx.compose.runtime.Composable public static void DSTopAppBar(optional androidx.compose.ui.Modifier modifier, optional @StringRes Integer? titleRes, optional androidx.compose.ui.graphics.vector.ImageVector? navigationIcon, optional String? navigationIconContentDescription, optional androidx.compose.ui.graphics.vector.ImageVector? actionIcon, optional String? actionIconContentDescription, optional kotlin.jvm.functions.Function0<kotlin.Unit>? logo, optional boolean dismissable, optional long scrollUpBackgroundColor, optional long defaultBackgroundColor, optional boolean enableScrollColorChange, optional boolean isScrolledUp, optional kotlin.jvm.functions.Function0<kotlin.Unit> onBackClick, optional kotlin.jvm.functions.Function0<kotlin.Unit> onActionClick, optional kotlin.jvm.functions.Function0<kotlin.Unit> onDismiss);
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public final class DSWavesKt {
    method @androidx.compose.runtime.Composable public static void DSExpandingWavesDrawBehind(optional androidx.compose.ui.Modifier modifier, optional long color, optional int waves, optional int durationMs, optional float strokeWidth, optional float maxRadiusFraction, optional boolean showCenterDot, optional float size);
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(showBackground=true, name="Animated (run app to see)") public static void DSExpandingWavesDrawBehindPreview();
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(showBackground=true, name="Animated (run app to see)") public static void DSJarvisAssistantAnimatedPreview();
    method @androidx.compose.runtime.Composable public static void DSWavesAnimations(optional androidx.compose.ui.Modifier modifier, optional float size, optional boolean showWaveAnimation);
  }

  @androidx.compose.runtime.Stable public final class DrawerAnimationConfig {
    ctor public DrawerAnimationConfig(float screenWidth, float drawerWidth, float cameraDistance);
    method public float component1();
    method public float component2();
    method public float component3();
    method public com.jarvis.core.internal.designsystem.component.DrawerAnimationConfig copy(float screenWidth, float drawerWidth, float cameraDistance);
    method public float getCameraDistance();
    method public float getDrawerWidth();
    method public float getScreenWidth();
    property public final float cameraDistance;
    property public final float drawerWidth;
    property public final float screenWidth;
  }

  @androidx.compose.runtime.Stable public final class DrawerOffsets {
    ctor public DrawerOffsets(long drawerOffset, long contentOffset, float rotationY, float cornerRadius);
    method public long component1-nOcc-ac();
    method public long component2-nOcc-ac();
    method public float component3();
    method public float component4-D9Ej5fM();
    method public com.jarvis.core.internal.designsystem.component.DrawerOffsets copy-ViPMAEc(long drawerOffset, long contentOffset, float rotationY, float cornerRadius);
    method public long getContentOffset();
    method public float getCornerRadius();
    method public long getDrawerOffset();
    method public float getRotationY();
    property public final long contentOffset;
    property public final float cornerRadius;
    property public final long drawerOffset;
    property public final float rotationY;
  }

  public abstract sealed class FlagStyle {
    method public final long getBackgroundColor();
    method public final long getDescriptionTextColor();
    method public final androidx.compose.ui.graphics.vector.ImageVector getIconResource();
    method public final long getIconTint();
    method public final long getTitleTextColor();
    property public final long backgroundColor;
    property public final long descriptionTextColor;
    property public final androidx.compose.ui.graphics.vector.ImageVector iconResource;
    property public final long iconTint;
    property public final long titleTextColor;
  }

  public static final class FlagStyle.Default extends com.jarvis.core.internal.designsystem.component.FlagStyle {
    field public static final com.jarvis.core.internal.designsystem.component.FlagStyle.Default INSTANCE;
  }

  public static final class FlagStyle.Error extends com.jarvis.core.internal.designsystem.component.FlagStyle {
    field public static final com.jarvis.core.internal.designsystem.component.FlagStyle.Error INSTANCE;
  }

  public static final class FlagStyle.Info extends com.jarvis.core.internal.designsystem.component.FlagStyle {
    field public static final com.jarvis.core.internal.designsystem.component.FlagStyle.Info INSTANCE;
  }

  public static final class FlagStyle.Normal extends com.jarvis.core.internal.designsystem.component.FlagStyle {
    field public static final com.jarvis.core.internal.designsystem.component.FlagStyle.Normal INSTANCE;
  }

  public static final class FlagStyle.Warning extends com.jarvis.core.internal.designsystem.component.FlagStyle {
    field public static final com.jarvis.core.internal.designsystem.component.FlagStyle.Warning INSTANCE;
  }

  public static final class FlagStyle.Wealth extends com.jarvis.core.internal.designsystem.component.FlagStyle {
    field public static final com.jarvis.core.internal.designsystem.component.FlagStyle.Wealth INSTANCE;
  }

  public final class ItemInterval {
    ctor public ItemInterval(optional float start, optional int size);
    method public float component1();
    method public int component2();
    method public com.jarvis.core.internal.designsystem.component.ItemInterval copy(float start, int size);
    method public float getCenter();
    method public float getEnd();
    method public int getSize();
    method public float getStart();
    property public final float center;
    property public final float end;
    property public final int size;
    property public final float start;
  }

  public interface ReorderableLazyCollectionStateInterface {
    method public boolean isAnyItemDragging();
    property public abstract boolean isAnyItemDragging;
  }

  @androidx.compose.runtime.Stable public final class ReorderableLazyListState extends com.jarvis.core.internal.designsystem.component.DSReorderableLazyCollectionState<androidx.compose.foundation.lazy.LazyListItemInfo> {
  }

  public final class ScrollAreaOffsets {
    ctor public ScrollAreaOffsets(float start, float end);
    method public float component1();
    method public float component2();
    method public com.jarvis.core.internal.designsystem.component.ScrollAreaOffsets copy(float start, float end);
    method public float getEnd();
    method public float getStart();
    property public final float end;
    property public final float start;
  }

  public enum ScrollMoveMode {
    method public static com.jarvis.core.internal.designsystem.component.ScrollMoveMode valueOf(String value) throws java.lang.IllegalArgumentException, java.lang.NullPointerException;
    method public static com.jarvis.core.internal.designsystem.component.ScrollMoveMode[] values();
    enum_constant public static final com.jarvis.core.internal.designsystem.component.ScrollMoveMode INSERT;
    enum_constant public static final com.jarvis.core.internal.designsystem.component.ScrollMoveMode SWAP;
  }

  public final class ScrollState {
    ctor public ScrollState(optional boolean isScrolledUp, optional boolean isScrolledDown);
    method public boolean component1();
    method public boolean component2();
    method public com.jarvis.core.internal.designsystem.component.ScrollState copy(boolean isScrolledUp, boolean isScrolledDown);
    method public boolean isScrolledDown();
    method public boolean isScrolledUp();
    property public final boolean isScrolledDown;
    property public final boolean isScrolledUp;
  }

  public abstract sealed class UiText {
    method @androidx.compose.runtime.Composable public final String asString();
    method public final String asString(android.content.Context context);
  }

  public static final class UiText.DynamicString extends com.jarvis.core.internal.designsystem.component.UiText {
    ctor public UiText.DynamicString(String value);
    method public String component1();
    method public com.jarvis.core.internal.designsystem.component.UiText.DynamicString copy(String value);
    method public String getValue();
    property public final String value;
  }

  public static final class UiText.StringResource extends com.jarvis.core.internal.designsystem.component.UiText {
    ctor public UiText.StringResource(@StringRes int resId, java.lang.Object... args);
    method public Object![] getArgs();
    method public int getResId();
    property public final Object![] args;
    property public final int resId;
  }

  public final class Wave {
    ctor public Wave(float progress, optional float speed);
    method public float component1();
    method public float component2();
    method public com.jarvis.core.internal.designsystem.component.Wave copy(float progress, float speed);
    method public float getProgress();
    method public float getSpeed();
    property public final float progress;
    property public final float speed;
  }

  public final class WaveAnimationState {
    ctor public WaveAnimationState(optional java.util.List<com.jarvis.core.internal.designsystem.component.Wave> waves, optional float spawnTimer);
    method public java.util.List<com.jarvis.core.internal.designsystem.component.Wave> component1();
    method public float component2();
    method public com.jarvis.core.internal.designsystem.component.WaveAnimationState copy(java.util.List<com.jarvis.core.internal.designsystem.component.Wave> waves, float spawnTimer);
    method public float getSpawnTimer();
    method public java.util.List<com.jarvis.core.internal.designsystem.component.Wave> getWaves();
    method public com.jarvis.core.internal.designsystem.component.WaveAnimationState nextFrame(float deltaMs);
    property public final float spawnTimer;
    property public final java.util.List<com.jarvis.core.internal.designsystem.component.Wave> waves;
  }

}

package com.jarvis.core.internal.designsystem.component.charts {

  public enum ChartOrientation {
    method public static com.jarvis.core.internal.designsystem.component.charts.ChartOrientation valueOf(String value) throws java.lang.IllegalArgumentException, java.lang.NullPointerException;
    method public static com.jarvis.core.internal.designsystem.component.charts.ChartOrientation[] values();
    enum_constant public static final com.jarvis.core.internal.designsystem.component.charts.ChartOrientation Horizontal;
    enum_constant public static final com.jarvis.core.internal.designsystem.component.charts.ChartOrientation Vertical;
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public final class DSAreaChartKt {
    method @androidx.compose.runtime.Composable public static void DSAreaChart(java.util.List<com.jarvis.core.internal.designsystem.component.charts.DSChartDataPoint> dataPoints, optional androidx.compose.ui.Modifier modifier, optional long lineColor, optional long fillStartColor, optional long fillEndColor, optional float strokeWidth, optional boolean showGrid, optional long gridColor, optional long backgroundColor, optional androidx.compose.foundation.layout.PaddingValues paddingValues, optional int animationDurationMs, optional String? contentDescription);
  }

  public final class DSBarChartData {
    ctor public DSBarChartData(float value, String label, optional androidx.compose.ui.graphics.Color? color);
    method public float component1();
    method public String component2();
    method public androidx.compose.ui.graphics.Color? component3-QN2ZGVo();
    method public com.jarvis.core.internal.designsystem.component.charts.DSBarChartData copy-t9lfQc4(float value, String label, androidx.compose.ui.graphics.Color? color);
    method public androidx.compose.ui.graphics.Color? getColor();
    method public String getLabel();
    method public float getValue();
    property public final androidx.compose.ui.graphics.Color? color;
    property public final String label;
    property public final float value;
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public final class DSBarChartKt {
    method @androidx.compose.runtime.Composable public static void DSBarChart(java.util.List<com.jarvis.core.internal.designsystem.component.charts.DSBarChartData> data, optional androidx.compose.ui.Modifier modifier, optional com.jarvis.core.internal.designsystem.component.charts.ChartOrientation orientation, optional java.util.List<androidx.compose.ui.graphics.Color> colors, optional long backgroundColor, optional float cornerRadius, optional float barSpacing, optional androidx.compose.foundation.layout.PaddingValues paddingValues, optional boolean showGrid, optional long gridColor, optional int animationDurationMs, optional String? contentDescription);
  }

  public final class DSChartDataPoint {
    ctor public DSChartDataPoint(float x, float y, optional String? label);
    method public float component1();
    method public float component2();
    method public String? component3();
    method public com.jarvis.core.internal.designsystem.component.charts.DSChartDataPoint copy(float x, float y, String? label);
    method public String? getLabel();
    method public float getX();
    method public float getY();
    property public final String? label;
    property public final float x;
    property public final float y;
  }

  public final class DSDonutChartData {
    ctor public DSDonutChartData(float value, String label, optional androidx.compose.ui.graphics.Color? color);
    method public float component1();
    method public String component2();
    method public androidx.compose.ui.graphics.Color? component3-QN2ZGVo();
    method public com.jarvis.core.internal.designsystem.component.charts.DSDonutChartData copy-t9lfQc4(float value, String label, androidx.compose.ui.graphics.Color? color);
    method public androidx.compose.ui.graphics.Color? getColor();
    method public String getLabel();
    method public float getValue();
    property public final androidx.compose.ui.graphics.Color? color;
    property public final String label;
    property public final float value;
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public final class DSDonutChartKt {
    method @androidx.compose.runtime.Composable public static void DSDonutChart(java.util.List<com.jarvis.core.internal.designsystem.component.charts.DSDonutChartData> data, optional androidx.compose.ui.Modifier modifier, optional float size, optional float strokeWidth, optional java.util.List<androidx.compose.ui.graphics.Color> colors, optional long backgroundColor, optional int animationDurationMs, optional String? contentDescription);
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public final class DSGaugeChartKt {
    method @androidx.compose.runtime.Composable public static void DSGaugeChart(float value, optional float maxValue, optional androidx.compose.ui.Modifier modifier, optional float size, optional float strokeWidth, optional float startAngle, optional float sweepAngle, optional long backgroundColor, optional long foregroundColor, optional androidx.compose.ui.graphics.Brush? gradient, optional int indicatorCount, optional boolean showIndicators, optional int animationDurationMs, optional String? contentDescription);
  }

}

package com.jarvis.core.internal.designsystem.icons {

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public final class DSIcons {
    method public androidx.compose.ui.graphics.vector.ImageVector getAdb();
    method public androidx.compose.ui.graphics.vector.ImageVector getAdd();
    method public androidx.compose.ui.graphics.vector.ImageVector getAndroid();
    method public androidx.compose.ui.graphics.vector.ImageVector getArrowDown();
    method public androidx.compose.ui.graphics.vector.ImageVector getArrowForward();
    method public androidx.compose.ui.graphics.vector.ImageVector getArrowForwards();
    method public androidx.compose.ui.graphics.vector.ImageVector getArrowUp();
    method public androidx.compose.ui.graphics.vector.ImageVector getCheck();
    method public androidx.compose.ui.graphics.vector.ImageVector getDateRange();
    method public androidx.compose.ui.graphics.vector.ImageVector getDelete();
    method public androidx.compose.ui.graphics.vector.ImageVector getDescription();
    method public androidx.compose.ui.graphics.vector.ImageVector getEmail();
    method public androidx.compose.ui.graphics.vector.ImageVector getHome();
    method public androidx.compose.ui.graphics.vector.ImageVector getHomeFilled();
    method public androidx.compose.ui.graphics.vector.ImageVector getInfo();
    method public androidx.compose.ui.graphics.vector.ImageVector getLink();
    method public androidx.compose.ui.graphics.vector.ImageVector getMenu();
    method public androidx.compose.ui.graphics.vector.ImageVector getMonitor();
    method public androidx.compose.ui.graphics.vector.ImageVector getMoreVert();
    method public androidx.compose.ui.graphics.vector.ImageVector getNetworkCheck();
    method public androidx.compose.ui.graphics.vector.ImageVector getNetworkWifi();
    method public androidx.compose.ui.graphics.vector.ImageVector getPerson();
    method public androidx.compose.ui.graphics.vector.ImageVector getPlace();
    method public androidx.compose.ui.graphics.vector.ImageVector getRefresh();
    method public androidx.compose.ui.graphics.vector.ImageVector getSearch();
    method public androidx.compose.ui.graphics.vector.ImageVector getSettings();
    method public androidx.compose.ui.graphics.vector.ImageVector getSettingsFilled();
    method public androidx.compose.ui.graphics.vector.ImageVector getShare();
    method public androidx.compose.ui.graphics.vector.ImageVector getStars();
    property public final androidx.compose.ui.graphics.vector.ImageVector adb;
    property public final androidx.compose.ui.graphics.vector.ImageVector add;
    property public final androidx.compose.ui.graphics.vector.ImageVector android;
    property public final androidx.compose.ui.graphics.vector.ImageVector arrowDown;
    property public final androidx.compose.ui.graphics.vector.ImageVector arrowForward;
    property public final androidx.compose.ui.graphics.vector.ImageVector arrowForwards;
    property public final androidx.compose.ui.graphics.vector.ImageVector arrowUp;
    property public final androidx.compose.ui.graphics.vector.ImageVector check;
    property public final androidx.compose.ui.graphics.vector.ImageVector dateRange;
    property public final androidx.compose.ui.graphics.vector.ImageVector delete;
    property public final androidx.compose.ui.graphics.vector.ImageVector description;
    property public final androidx.compose.ui.graphics.vector.ImageVector email;
    property public final androidx.compose.ui.graphics.vector.ImageVector home;
    property public final androidx.compose.ui.graphics.vector.ImageVector homeFilled;
    property public final androidx.compose.ui.graphics.vector.ImageVector info;
    property public final androidx.compose.ui.graphics.vector.ImageVector link;
    property public final androidx.compose.ui.graphics.vector.ImageVector menu;
    property public final androidx.compose.ui.graphics.vector.ImageVector monitor;
    property public final androidx.compose.ui.graphics.vector.ImageVector moreVert;
    property public final androidx.compose.ui.graphics.vector.ImageVector networkCheck;
    property public final androidx.compose.ui.graphics.vector.ImageVector networkWifi;
    property public final androidx.compose.ui.graphics.vector.ImageVector person;
    property public final androidx.compose.ui.graphics.vector.ImageVector place;
    property public final androidx.compose.ui.graphics.vector.ImageVector refresh;
    property public final androidx.compose.ui.graphics.vector.ImageVector search;
    property public final androidx.compose.ui.graphics.vector.ImageVector settings;
    property public final androidx.compose.ui.graphics.vector.ImageVector settingsFilled;
    property public final androidx.compose.ui.graphics.vector.ImageVector share;
    property public final androidx.compose.ui.graphics.vector.ImageVector stars;
    field public static final com.jarvis.core.internal.designsystem.icons.DSIcons INSTANCE;
  }

  public static final class DSIcons.Filled {
    method public androidx.compose.ui.graphics.vector.ImageVector getHome();
    method public androidx.compose.ui.graphics.vector.ImageVector getInspector();
    method public androidx.compose.ui.graphics.vector.ImageVector getMoreHoriz();
    method public androidx.compose.ui.graphics.vector.ImageVector getMoreVert();
    method public androidx.compose.ui.graphics.vector.ImageVector getPreference();
    method public androidx.compose.ui.graphics.vector.ImageVector getSettings();
    property public final androidx.compose.ui.graphics.vector.ImageVector home;
    property public final androidx.compose.ui.graphics.vector.ImageVector inspector;
    property public final androidx.compose.ui.graphics.vector.ImageVector moreHoriz;
    property public final androidx.compose.ui.graphics.vector.ImageVector moreVert;
    property public final androidx.compose.ui.graphics.vector.ImageVector preference;
    property public final androidx.compose.ui.graphics.vector.ImageVector settings;
    field public static final com.jarvis.core.internal.designsystem.icons.DSIcons.Filled INSTANCE;
  }

  public static final class DSIcons.Outlined {
    method public androidx.compose.ui.graphics.vector.ImageVector getHome();
    method public androidx.compose.ui.graphics.vector.ImageVector getInfo();
    method public androidx.compose.ui.graphics.vector.ImageVector getInspector();
    method public androidx.compose.ui.graphics.vector.ImageVector getMoreHoriz();
    method public androidx.compose.ui.graphics.vector.ImageVector getMoreVert();
    method public androidx.compose.ui.graphics.vector.ImageVector getPreference();
    method public androidx.compose.ui.graphics.vector.ImageVector getSettings();
    property public final androidx.compose.ui.graphics.vector.ImageVector home;
    property public final androidx.compose.ui.graphics.vector.ImageVector info;
    property public final androidx.compose.ui.graphics.vector.ImageVector inspector;
    property public final androidx.compose.ui.graphics.vector.ImageVector moreHoriz;
    property public final androidx.compose.ui.graphics.vector.ImageVector moreVert;
    property public final androidx.compose.ui.graphics.vector.ImageVector preference;
    property public final androidx.compose.ui.graphics.vector.ImageVector settings;
    field public static final com.jarvis.core.internal.designsystem.icons.DSIcons.Outlined INSTANCE;
  }

  public static final class DSIcons.Rounded {
    method public androidx.compose.ui.graphics.vector.ImageVector getAdd();
    method public androidx.compose.ui.graphics.vector.ImageVector getArrowBack();
    method public androidx.compose.ui.graphics.vector.ImageVector getCheck();
    method public androidx.compose.ui.graphics.vector.ImageVector getCheckCircle();
    method public androidx.compose.ui.graphics.vector.ImageVector getClose();
    method public androidx.compose.ui.graphics.vector.ImageVector getSearch();
    method public androidx.compose.ui.graphics.vector.ImageVector getSettings();
    method public androidx.compose.ui.graphics.vector.ImageVector getWarning();
    property public final androidx.compose.ui.graphics.vector.ImageVector add;
    property public final androidx.compose.ui.graphics.vector.ImageVector arrowBack;
    property public final androidx.compose.ui.graphics.vector.ImageVector check;
    property public final androidx.compose.ui.graphics.vector.ImageVector checkCircle;
    property public final androidx.compose.ui.graphics.vector.ImageVector close;
    property public final androidx.compose.ui.graphics.vector.ImageVector search;
    property public final androidx.compose.ui.graphics.vector.ImageVector settings;
    property public final androidx.compose.ui.graphics.vector.ImageVector warning;
    field public static final com.jarvis.core.internal.designsystem.icons.DSIcons.Rounded INSTANCE;
  }

}

package com.jarvis.core.internal.designsystem.theme {

  @androidx.compose.runtime.Immutable public final class Chart {
    ctor public Chart(optional long primary, optional long secondary, optional long tertiary, optional long quaternary, optional long quinary, optional java.util.List<androidx.compose.ui.graphics.Color> colors);
    method public long component1-0d7_KjU();
    method public long component2-0d7_KjU();
    method public long component3-0d7_KjU();
    method public long component4-0d7_KjU();
    method public long component5-0d7_KjU();
    method public java.util.List<androidx.compose.ui.graphics.Color> component6();
    method public com.jarvis.core.internal.designsystem.theme.Chart copy-EXAOFh0(long primary, long secondary, long tertiary, long quaternary, long quinary, java.util.List<androidx.compose.ui.graphics.Color> colors);
    method public java.util.List<androidx.compose.ui.graphics.Color> getColors();
    method public long getPrimary();
    method public long getQuaternary();
    method public long getQuinary();
    method public long getSecondary();
    method public long getTertiary();
    property public final java.util.List<androidx.compose.ui.graphics.Color> colors;
    property public final long primary;
    property public final long quaternary;
    property public final long quinary;
    property public final long secondary;
    property public final long tertiary;
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public final class DSBackgroundKt {
    method public static androidx.compose.runtime.ProvidableCompositionLocal<com.jarvis.core.internal.designsystem.theme.DSBackgroundTheme> getLocalDSBackgroundTheme();
    property public static final androidx.compose.runtime.ProvidableCompositionLocal<com.jarvis.core.internal.designsystem.theme.DSBackgroundTheme> LocalDSBackgroundTheme;
  }

  @androidx.compose.runtime.Immutable public final class DSBackgroundTheme {
    ctor public DSBackgroundTheme(optional long color, optional float tonalElevation);
    method public long component1-0d7_KjU();
    method public float component2-D9Ej5fM();
    method public com.jarvis.core.internal.designsystem.theme.DSBackgroundTheme copy-l07J4OM(long color, float tonalElevation);
    method public long getColor();
    method public float getTonalElevation();
    property public final long color;
    property public final float tonalElevation;
  }

  @androidx.compose.runtime.Immutable public final class DSBorder {
    ctor public DSBorder(optional com.jarvis.core.internal.designsystem.theme.DSBorder.DSBorderThickness thickness, optional com.jarvis.core.internal.designsystem.theme.DSBorder.DSRadius radius);
    method public com.jarvis.core.internal.designsystem.theme.DSBorder.DSBorderThickness component1();
    method public com.jarvis.core.internal.designsystem.theme.DSBorder.DSRadius component2();
    method public com.jarvis.core.internal.designsystem.theme.DSBorder copy(com.jarvis.core.internal.designsystem.theme.DSBorder.DSBorderThickness thickness, com.jarvis.core.internal.designsystem.theme.DSBorder.DSRadius radius);
    method public com.jarvis.core.internal.designsystem.theme.DSBorder.DSRadius getRadius();
    method public com.jarvis.core.internal.designsystem.theme.DSBorder.DSBorderThickness getThickness();
    property public final com.jarvis.core.internal.designsystem.theme.DSBorder.DSRadius radius;
    property public final com.jarvis.core.internal.designsystem.theme.DSBorder.DSBorderThickness thickness;
  }

  public static final class DSBorder.DSBorderThickness {
    ctor public DSBorder.DSBorderThickness(optional float xs, optional float s);
    method public float component1-D9Ej5fM();
    method public float component2-D9Ej5fM();
    method public com.jarvis.core.internal.designsystem.theme.DSBorder.DSBorderThickness copy-YgX7TsA(float xs, float s);
    method public float getS();
    method public float getXs();
    property public final float s;
    property public final float xs;
  }

  public static final class DSBorder.DSRadius {
    ctor public DSBorder.DSRadius(optional float xs, optional float s, optional float m, optional float l, optional float xl, optional float pill);
    method public float component1-D9Ej5fM();
    method public float component2-D9Ej5fM();
    method public float component3-D9Ej5fM();
    method public float component4-D9Ej5fM();
    method public float component5-D9Ej5fM();
    method public float component6-D9Ej5fM();
    method public com.jarvis.core.internal.designsystem.theme.DSBorder.DSRadius copy-erZIsFM(float xs, float s, float m, float l, float xl, float pill);
    method public float getL();
    method public float getM();
    method public float getPill();
    method public float getS();
    method public float getXl();
    method public float getXs();
    property public final float l;
    property public final float m;
    property public final float pill;
    property public final float s;
    property public final float xl;
    property public final float xs;
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public final class DSBorderKt {
    method public static androidx.compose.runtime.ProvidableCompositionLocal<com.jarvis.core.internal.designsystem.theme.DSBorder> getLocalDSBorder();
    method public static float getRadiusL();
    method public static float getRadiusM();
    method public static float getRadiusPill();
    method public static float getRadiusS();
    method public static float getRadiusXL();
    method public static float getRadiusXS();
    method public static float getThicknessS();
    method public static float getThicknessXS();
    property public static final androidx.compose.runtime.ProvidableCompositionLocal<com.jarvis.core.internal.designsystem.theme.DSBorder> LocalDSBorder;
    property public static final float RadiusL;
    property public static final float RadiusM;
    property public static final float RadiusPill;
    property public static final float RadiusS;
    property public static final float RadiusXL;
    property public static final float RadiusXS;
    property public static final float ThicknessS;
    property public static final float ThicknessXS;
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public final class DSColorKt {
    method public static com.jarvis.core.internal.designsystem.theme.DSColors darkColors();
    method public static long getBackground0();
    method public static error.NonExistentClass! getChartColors();
    method public static long getDarkBackground0();
    method public static long getDarkError100();
    method public static long getDarkError20();
    method public static long getDarkError40();
    method public static long getDarkError60();
    method public static long getDarkError80();
    method public static long getDarkInfo100();
    method public static long getDarkInfo20();
    method public static long getDarkInfo40();
    method public static long getDarkInfo60();
    method public static long getDarkInfo80();
    method public static long getDarkNeutral0();
    method public static long getDarkNeutral100();
    method public static long getDarkNeutral20();
    method public static long getDarkNeutral40();
    method public static long getDarkNeutral60();
    method public static long getDarkNeutral80();
    method public static long getDarkPrimary0();
    method public static long getDarkPrimary100();
    method public static long getDarkPrimary20();
    method public static long getDarkPrimary40();
    method public static long getDarkPrimary60();
    method public static long getDarkPrimary80();
    method public static long getDarkSecondary100();
    method public static long getDarkSecondary20();
    method public static long getDarkSecondary40();
    method public static long getDarkSecondary60();
    method public static long getDarkSecondary80();
    method public static long getDarkSuccess100();
    method public static long getDarkSuccess20();
    method public static long getDarkSuccess40();
    method public static long getDarkSuccess60();
    method public static long getDarkSuccess80();
    method public static long getDarkWarning100();
    method public static long getDarkWarning20();
    method public static long getDarkWarning40();
    method public static long getDarkWarning60();
    method public static long getDarkWarning80();
    method public static long getError100();
    method public static long getError20();
    method public static long getError40();
    method public static long getError60();
    method public static long getError80();
    method public static long getInfo100();
    method public static long getInfo20();
    method public static long getInfo40();
    method public static long getInfo60();
    method public static long getInfo80();
    method public static long getJarvisBlue();
    method public static long getJarvisPink();
    method public static androidx.compose.runtime.ProvidableCompositionLocal<com.jarvis.core.internal.designsystem.theme.DSColors> getLocalDSColors();
    method public static long getNeutral0();
    method public static long getNeutral100();
    method public static long getNeutral20();
    method public static long getNeutral40();
    method public static long getNeutral60();
    method public static long getNeutral80();
    method public static long getPrimary0();
    method public static long getPrimary100();
    method public static long getPrimary20();
    method public static long getPrimary40();
    method public static long getPrimary60();
    method public static long getPrimary80();
    method public static long getSecondary100();
    method public static long getSecondary20();
    method public static long getSecondary40();
    method public static long getSecondary60();
    method public static long getSecondary80();
    method public static long getSuccess100();
    method public static long getSuccess20();
    method public static long getSuccess40();
    method public static long getSuccess60();
    method public static long getSuccess80();
    method public static long getWarning100();
    method public static long getWarning20();
    method public static long getWarning40();
    method public static long getWarning60();
    method public static long getWarning80();
    method public static com.jarvis.core.internal.designsystem.theme.DSColors lightColors();
    property public static final error.NonExistentClass! ChartColors;
    property public static final long DarkBackground0;
    property public static final long DarkError100;
    property public static final long DarkError20;
    property public static final long DarkError40;
    property public static final long DarkError60;
    property public static final long DarkError80;
    property public static final long DarkInfo100;
    property public static final long DarkInfo20;
    property public static final long DarkInfo40;
    property public static final long DarkInfo60;
    property public static final long DarkInfo80;
    property public static final long DarkNeutral0;
    property public static final long DarkNeutral100;
    property public static final long DarkNeutral20;
    property public static final long DarkNeutral40;
    property public static final long DarkNeutral60;
    property public static final long DarkNeutral80;
    property public static final long DarkPrimary0;
    property public static final long DarkPrimary100;
    property public static final long DarkPrimary20;
    property public static final long DarkPrimary40;
    property public static final long DarkPrimary60;
    property public static final long DarkPrimary80;
    property public static final long DarkSecondary100;
    property public static final long DarkSecondary20;
    property public static final long DarkSecondary40;
    property public static final long DarkSecondary60;
    property public static final long DarkSecondary80;
    property public static final long DarkSuccess100;
    property public static final long DarkSuccess20;
    property public static final long DarkSuccess40;
    property public static final long DarkSuccess60;
    property public static final long DarkSuccess80;
    property public static final long DarkWarning100;
    property public static final long DarkWarning20;
    property public static final long DarkWarning40;
    property public static final long DarkWarning60;
    property public static final long DarkWarning80;
    property public static final long Error100;
    property public static final long Error20;
    property public static final long Error40;
    property public static final long Error60;
    property public static final long Error80;
    property public static final long Info100;
    property public static final long Info20;
    property public static final long Info40;
    property public static final long Info60;
    property public static final long Info80;
    property public static final long JarvisBlue;
    property public static final long JarvisPink;
    property public static final androidx.compose.runtime.ProvidableCompositionLocal<com.jarvis.core.internal.designsystem.theme.DSColors> LocalDSColors;
    property public static final long Neutral0;
    property public static final long Neutral100;
    property public static final long Neutral20;
    property public static final long Neutral40;
    property public static final long Neutral60;
    property public static final long Neutral80;
    property public static final long Primary0;
    property public static final long Primary100;
    property public static final long Primary20;
    property public static final long Primary40;
    property public static final long Primary60;
    property public static final long Primary80;
    property public static final long Secondary100;
    property public static final long Secondary20;
    property public static final long Secondary40;
    property public static final long Secondary60;
    property public static final long Secondary80;
    property public static final long Success100;
    property public static final long Success20;
    property public static final long Success40;
    property public static final long Success60;
    property public static final long Success80;
    property public static final long Warning100;
    property public static final long Warning20;
    property public static final long Warning40;
    property public static final long Warning60;
    property public static final long Warning80;
    property public static final long background0;
  }

  @androidx.compose.runtime.Immutable public final class DSColors {
    ctor public DSColors(optional com.jarvis.core.internal.designsystem.theme.Primary primary, optional com.jarvis.core.internal.designsystem.theme.Secondary secondary, optional com.jarvis.core.internal.designsystem.theme.Neutral neutral, optional com.jarvis.core.internal.designsystem.theme.Success success, optional com.jarvis.core.internal.designsystem.theme.Warning warning, optional com.jarvis.core.internal.designsystem.theme.Error error, optional com.jarvis.core.internal.designsystem.theme.Info info, optional com.jarvis.core.internal.designsystem.theme.Extra extra, optional com.jarvis.core.internal.designsystem.theme.Chart chart);
    method public com.jarvis.core.internal.designsystem.theme.Primary component1();
    method public com.jarvis.core.internal.designsystem.theme.Secondary component2();
    method public com.jarvis.core.internal.designsystem.theme.Neutral component3();
    method public com.jarvis.core.internal.designsystem.theme.Success component4();
    method public com.jarvis.core.internal.designsystem.theme.Warning component5();
    method public com.jarvis.core.internal.designsystem.theme.Error component6();
    method public com.jarvis.core.internal.designsystem.theme.Info component7();
    method public com.jarvis.core.internal.designsystem.theme.Extra component8();
    method public com.jarvis.core.internal.designsystem.theme.Chart component9();
    method public com.jarvis.core.internal.designsystem.theme.DSColors copy(com.jarvis.core.internal.designsystem.theme.Primary primary, com.jarvis.core.internal.designsystem.theme.Secondary secondary, com.jarvis.core.internal.designsystem.theme.Neutral neutral, com.jarvis.core.internal.designsystem.theme.Success success, com.jarvis.core.internal.designsystem.theme.Warning warning, com.jarvis.core.internal.designsystem.theme.Error error, com.jarvis.core.internal.designsystem.theme.Info info, com.jarvis.core.internal.designsystem.theme.Extra extra, com.jarvis.core.internal.designsystem.theme.Chart chart);
    method public com.jarvis.core.internal.designsystem.theme.Chart getChart();
    method public com.jarvis.core.internal.designsystem.theme.Error getError();
    method public com.jarvis.core.internal.designsystem.theme.Extra getExtra();
    method public com.jarvis.core.internal.designsystem.theme.Info getInfo();
    method public com.jarvis.core.internal.designsystem.theme.Neutral getNeutral();
    method public com.jarvis.core.internal.designsystem.theme.Primary getPrimary();
    method public com.jarvis.core.internal.designsystem.theme.Secondary getSecondary();
    method public com.jarvis.core.internal.designsystem.theme.Success getSuccess();
    method public com.jarvis.core.internal.designsystem.theme.Warning getWarning();
    property public final com.jarvis.core.internal.designsystem.theme.Chart chart;
    property public final com.jarvis.core.internal.designsystem.theme.Error error;
    property public final com.jarvis.core.internal.designsystem.theme.Extra extra;
    property public final com.jarvis.core.internal.designsystem.theme.Info info;
    property public final com.jarvis.core.internal.designsystem.theme.Neutral neutral;
    property public final com.jarvis.core.internal.designsystem.theme.Primary primary;
    property public final com.jarvis.core.internal.designsystem.theme.Secondary secondary;
    property public final com.jarvis.core.internal.designsystem.theme.Success success;
    property public final com.jarvis.core.internal.designsystem.theme.Warning warning;
  }

  @androidx.compose.runtime.Immutable public final class DSContentEmphasis {
    ctor public DSContentEmphasis(optional float normal, optional float minor, optional float subtle, optional float disabled);
    method public float component1();
    method public float component2();
    method public float component3();
    method public float component4();
    method public com.jarvis.core.internal.designsystem.theme.DSContentEmphasis copy(float normal, float minor, float subtle, float disabled);
    method public float getDisabled();
    method public float getMinor();
    method public float getNormal();
    method public float getSubtle();
    property public final float disabled;
    property public final float minor;
    property public final float normal;
    property public final float subtle;
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public final class DSContentEmphasisKt {
    method @androidx.compose.runtime.Composable public static long applyEmphasis(long, float emphasis);
    method public static androidx.compose.runtime.ProvidableCompositionLocal<com.jarvis.core.internal.designsystem.theme.DSContentEmphasis> getLocalDSContentEmphasis();
    property public static final androidx.compose.runtime.ProvidableCompositionLocal<com.jarvis.core.internal.designsystem.theme.DSContentEmphasis> LocalDSContentEmphasis;
    field public static final float EmphasisDisabled = 0.48f;
    field public static final float EmphasisMinor = 0.8f;
    field public static final float EmphasisNormal = 1.0f;
    field public static final float EmphasisSubtle = 0.66f;
  }

  @androidx.compose.runtime.Immutable public final class DSDimensions {
    ctor public DSDimensions(optional float none, optional float xxxs, optional float xxs, optional float xs, optional float s, optional float m, optional float l, optional float xl, optional float xxl, optional float xxxl, optional float xxxxl, optional float xxxxxl, optional float xxxxxxl, optional float xxxxxxxl, optional float xxxxxxxxl, optional float xxxxxxxxxl);
    method public float component1-D9Ej5fM();
    method public float component10-D9Ej5fM();
    method public float component11-D9Ej5fM();
    method public float component12-D9Ej5fM();
    method public float component13-D9Ej5fM();
    method public float component14-D9Ej5fM();
    method public float component15-D9Ej5fM();
    method public float component16-D9Ej5fM();
    method public float component2-D9Ej5fM();
    method public float component3-D9Ej5fM();
    method public float component4-D9Ej5fM();
    method public float component5-D9Ej5fM();
    method public float component6-D9Ej5fM();
    method public float component7-D9Ej5fM();
    method public float component8-D9Ej5fM();
    method public float component9-D9Ej5fM();
    method public com.jarvis.core.internal.designsystem.theme.DSDimensions copy-TfHjUgA(float none, float xxxs, float xxs, float xs, float s, float m, float l, float xl, float xxl, float xxxl, float xxxxl, float xxxxxl, float xxxxxxl, float xxxxxxxl, float xxxxxxxxl, float xxxxxxxxxl);
    method public float getL();
    method public float getM();
    method public float getNone();
    method public float getS();
    method public float getXl();
    method public float getXs();
    method public float getXxl();
    method public float getXxs();
    method public float getXxxl();
    method public float getXxxs();
    method public float getXxxxl();
    method public float getXxxxxl();
    method public float getXxxxxxl();
    method public float getXxxxxxxl();
    method public float getXxxxxxxxl();
    method public float getXxxxxxxxxl();
    property public final float l;
    property public final float m;
    property public final float none;
    property public final float s;
    property public final float xl;
    property public final float xs;
    property public final float xxl;
    property public final float xxs;
    property public final float xxxl;
    property public final float xxxs;
    property public final float xxxxl;
    property public final float xxxxxl;
    property public final float xxxxxxl;
    property public final float xxxxxxxl;
    property public final float xxxxxxxxl;
    property public final float xxxxxxxxxl;
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public final class DSDimensionsKt {
    method public static float getDimensionsL();
    method public static float getDimensionsM();
    method public static float getDimensionsNone();
    method public static float getDimensionsS();
    method public static float getDimensionsXL();
    method public static float getDimensionsXS();
    method public static float getDimensionsXXL();
    method public static float getDimensionsXXS();
    method public static float getDimensionsXXXL();
    method public static float getDimensionsXXXS();
    method public static float getDimensionsXXXXL();
    method public static float getDimensionsXXXXXL();
    method public static float getDimensionsXXXXXXL();
    method public static float getDimensionsXXXXXXXL();
    method public static float getDimensionsXXXXXXXXL();
    method public static float getDimensionsXXXXXXXXXL();
    method public static androidx.compose.runtime.ProvidableCompositionLocal<com.jarvis.core.internal.designsystem.theme.DSDimensions> getLocalDSDimensions();
    property public static final float DimensionsL;
    property public static final float DimensionsM;
    property public static final float DimensionsNone;
    property public static final float DimensionsS;
    property public static final float DimensionsXL;
    property public static final float DimensionsXS;
    property public static final float DimensionsXXL;
    property public static final float DimensionsXXS;
    property public static final float DimensionsXXXL;
    property public static final float DimensionsXXXS;
    property public static final float DimensionsXXXXL;
    property public static final float DimensionsXXXXXL;
    property public static final float DimensionsXXXXXXL;
    property public static final float DimensionsXXXXXXXL;
    property public static final float DimensionsXXXXXXXXL;
    property public static final float DimensionsXXXXXXXXXL;
    property public static final androidx.compose.runtime.ProvidableCompositionLocal<com.jarvis.core.internal.designsystem.theme.DSDimensions> LocalDSDimensions;
  }

  @androidx.compose.runtime.Immutable public final class DSElevations {
    ctor public DSElevations(optional float none, optional float level1, optional float level2, optional float level3, optional float level4, optional float level5);
    method public float component1-D9Ej5fM();
    method public float component2-D9Ej5fM();
    method public float component3-D9Ej5fM();
    method public float component4-D9Ej5fM();
    method public float component5-D9Ej5fM();
    method public float component6-D9Ej5fM();
    method public com.jarvis.core.internal.designsystem.theme.DSElevations copy-erZIsFM(float none, float level1, float level2, float level3, float level4, float level5);
    method public float getLevel1();
    method public float getLevel2();
    method public float getLevel3();
    method public float getLevel4();
    method public float getLevel5();
    method public float getNone();
    property public final float level1;
    property public final float level2;
    property public final float level3;
    property public final float level4;
    property public final float level5;
    property public final float none;
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public final class DSElevationsKt {
    method public static float getElevation0();
    method public static float getElevation1();
    method public static float getElevation2();
    method public static float getElevation3();
    method public static float getElevation4();
    method public static float getElevation5();
    method public static androidx.compose.runtime.ProvidableCompositionLocal<com.jarvis.core.internal.designsystem.theme.DSElevations> getLocalDSElevations();
    property public static final float Elevation0;
    property public static final float Elevation1;
    property public static final float Elevation2;
    property public static final float Elevation3;
    property public static final float Elevation4;
    property public static final float Elevation5;
    property public static final androidx.compose.runtime.ProvidableCompositionLocal<com.jarvis.core.internal.designsystem.theme.DSElevations> LocalDSElevations;
  }

  @androidx.compose.runtime.Immutable public final class DSGradientColors {
    ctor public DSGradientColors(optional long top, optional long bottom, optional long container);
    method public long component1-0d7_KjU();
    method public long component2-0d7_KjU();
    method public long component3-0d7_KjU();
    method public com.jarvis.core.internal.designsystem.theme.DSGradientColors copy-ysEtTa8(long top, long bottom, long container);
    method public long getBottom();
    method public long getContainer();
    method public long getTop();
    property public final long bottom;
    property public final long container;
    property public final long top;
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public final class DSGradientKt {
    method public static androidx.compose.runtime.ProvidableCompositionLocal<com.jarvis.core.internal.designsystem.theme.DSGradientColors> getLocalDSGradientColors();
    property public static final androidx.compose.runtime.ProvidableCompositionLocal<com.jarvis.core.internal.designsystem.theme.DSGradientColors> LocalDSGradientColors;
  }

  public final class DSJarvisTheme {
    method @androidx.compose.runtime.Composable public com.jarvis.core.internal.designsystem.theme.DSBackgroundTheme getBackground();
    method @androidx.compose.runtime.Composable public com.jarvis.core.internal.designsystem.theme.DSBorder getBorder();
    method @androidx.compose.runtime.Composable public com.jarvis.core.internal.designsystem.theme.DSColors getColors();
    method @androidx.compose.runtime.Composable public com.jarvis.core.internal.designsystem.theme.DSContentEmphasis getContentEmphasis();
    method @androidx.compose.runtime.Composable public com.jarvis.core.internal.designsystem.theme.DSDimensions getDimensions();
    method @androidx.compose.runtime.Composable public com.jarvis.core.internal.designsystem.theme.DSElevations getElevations();
    method @androidx.compose.runtime.Composable public com.jarvis.core.internal.designsystem.theme.DSGradientColors getGradient();
    method @androidx.compose.runtime.Composable public com.jarvis.core.internal.designsystem.theme.DSMotionScheme getMotionScheme();
    method @androidx.compose.runtime.Composable public com.jarvis.core.internal.designsystem.theme.DSShape getShapes();
    method @androidx.compose.runtime.Composable public com.jarvis.core.internal.designsystem.theme.DSSpacing getSpacing();
    method @androidx.compose.runtime.Composable public com.jarvis.core.internal.designsystem.theme.DSTint getTint();
    method @androidx.compose.runtime.Composable public com.jarvis.core.internal.designsystem.theme.DSTypography getTypography();
    property @androidx.compose.runtime.Composable public final com.jarvis.core.internal.designsystem.theme.DSBackgroundTheme background;
    property @androidx.compose.runtime.Composable public final com.jarvis.core.internal.designsystem.theme.DSBorder border;
    property @androidx.compose.runtime.Composable public final com.jarvis.core.internal.designsystem.theme.DSColors colors;
    property @androidx.compose.runtime.Composable public final com.jarvis.core.internal.designsystem.theme.DSContentEmphasis contentEmphasis;
    property @androidx.compose.runtime.Composable public final com.jarvis.core.internal.designsystem.theme.DSDimensions dimensions;
    property @androidx.compose.runtime.Composable public final com.jarvis.core.internal.designsystem.theme.DSElevations elevations;
    property @androidx.compose.runtime.Composable public final com.jarvis.core.internal.designsystem.theme.DSGradientColors gradient;
    property @androidx.compose.runtime.Composable public final com.jarvis.core.internal.designsystem.theme.DSMotionScheme motionScheme;
    property @androidx.compose.runtime.Composable public final com.jarvis.core.internal.designsystem.theme.DSShape shapes;
    property @androidx.compose.runtime.Composable public final com.jarvis.core.internal.designsystem.theme.DSSpacing spacing;
    property @androidx.compose.runtime.Composable public final com.jarvis.core.internal.designsystem.theme.DSTint tint;
    property @androidx.compose.runtime.Composable public final com.jarvis.core.internal.designsystem.theme.DSTypography typography;
    field public static final com.jarvis.core.internal.designsystem.theme.DSJarvisTheme INSTANCE;
  }

  @androidx.compose.runtime.Immutable public final class DSMotionScheme {
    ctor public DSMotionScheme(optional androidx.compose.animation.core.FiniteAnimationSpec<java.lang.Float> defaultSpec, optional androidx.compose.animation.core.FiniteAnimationSpec<java.lang.Float> fastSpec, optional androidx.compose.animation.core.FiniteAnimationSpec<java.lang.Float> slowSpec);
    method public androidx.compose.animation.core.FiniteAnimationSpec<java.lang.Float> component1();
    method public androidx.compose.animation.core.FiniteAnimationSpec<java.lang.Float> component2();
    method public androidx.compose.animation.core.FiniteAnimationSpec<java.lang.Float> component3();
    method public com.jarvis.core.internal.designsystem.theme.DSMotionScheme copy(androidx.compose.animation.core.FiniteAnimationSpec<java.lang.Float> defaultSpec, androidx.compose.animation.core.FiniteAnimationSpec<java.lang.Float> fastSpec, androidx.compose.animation.core.FiniteAnimationSpec<java.lang.Float> slowSpec);
    method public androidx.compose.animation.core.FiniteAnimationSpec<java.lang.Float> default();
    method public androidx.compose.animation.core.FiniteAnimationSpec<java.lang.Float> fast();
    method public androidx.compose.animation.core.FiniteAnimationSpec<java.lang.Float> getDefaultSpec();
    method public androidx.compose.animation.core.FiniteAnimationSpec<java.lang.Float> getFastSpec();
    method public androidx.compose.animation.core.FiniteAnimationSpec<java.lang.Float> getSlowSpec();
    method public androidx.compose.animation.core.FiniteAnimationSpec<java.lang.Float> slow();
    property public final androidx.compose.animation.core.FiniteAnimationSpec<java.lang.Float> defaultSpec;
    property public final androidx.compose.animation.core.FiniteAnimationSpec<java.lang.Float> fastSpec;
    property public final androidx.compose.animation.core.FiniteAnimationSpec<java.lang.Float> slowSpec;
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public final class DSMotionSchemeKt {
    method public static androidx.compose.runtime.ProvidableCompositionLocal<com.jarvis.core.internal.designsystem.theme.DSMotionScheme> getLocalDSMotionScheme();
    property public static final androidx.compose.runtime.ProvidableCompositionLocal<com.jarvis.core.internal.designsystem.theme.DSMotionScheme> LocalDSMotionScheme;
    field public static final int DefaultDuration = 300; // 0x12c
    field public static final int FastDuration = 150; // 0x96
    field public static final int SlowDuration = 500; // 0x1f4
  }

  @androidx.compose.runtime.Immutable public final class DSShape {
    ctor public DSShape(optional androidx.compose.foundation.shape.RoundedCornerShape none, optional androidx.compose.foundation.shape.RoundedCornerShape xs, optional androidx.compose.foundation.shape.RoundedCornerShape s, optional androidx.compose.foundation.shape.RoundedCornerShape m, optional androidx.compose.foundation.shape.RoundedCornerShape l, optional androidx.compose.foundation.shape.RoundedCornerShape xl, optional androidx.compose.foundation.shape.RoundedCornerShape xxl);
    method public androidx.compose.foundation.shape.RoundedCornerShape component1();
    method public androidx.compose.foundation.shape.RoundedCornerShape component2();
    method public androidx.compose.foundation.shape.RoundedCornerShape component3();
    method public androidx.compose.foundation.shape.RoundedCornerShape component4();
    method public androidx.compose.foundation.shape.RoundedCornerShape component5();
    method public androidx.compose.foundation.shape.RoundedCornerShape component6();
    method public androidx.compose.foundation.shape.RoundedCornerShape component7();
    method public com.jarvis.core.internal.designsystem.theme.DSShape copy(androidx.compose.foundation.shape.RoundedCornerShape none, androidx.compose.foundation.shape.RoundedCornerShape xs, androidx.compose.foundation.shape.RoundedCornerShape s, androidx.compose.foundation.shape.RoundedCornerShape m, androidx.compose.foundation.shape.RoundedCornerShape l, androidx.compose.foundation.shape.RoundedCornerShape xl, androidx.compose.foundation.shape.RoundedCornerShape xxl);
    method public androidx.compose.foundation.shape.RoundedCornerShape getL();
    method public androidx.compose.foundation.shape.RoundedCornerShape getM();
    method public androidx.compose.foundation.shape.RoundedCornerShape getNone();
    method public androidx.compose.foundation.shape.RoundedCornerShape getS();
    method public androidx.compose.foundation.shape.RoundedCornerShape getXl();
    method public androidx.compose.foundation.shape.RoundedCornerShape getXs();
    method public androidx.compose.foundation.shape.RoundedCornerShape getXxl();
    property public final androidx.compose.foundation.shape.RoundedCornerShape l;
    property public final androidx.compose.foundation.shape.RoundedCornerShape m;
    property public final androidx.compose.foundation.shape.RoundedCornerShape none;
    property public final androidx.compose.foundation.shape.RoundedCornerShape s;
    property public final androidx.compose.foundation.shape.RoundedCornerShape xl;
    property public final androidx.compose.foundation.shape.RoundedCornerShape xs;
    property public final androidx.compose.foundation.shape.RoundedCornerShape xxl;
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public final class DSShapeKt {
    method public static androidx.compose.runtime.ProvidableCompositionLocal<com.jarvis.core.internal.designsystem.theme.DSShape> getLocalDSShapes();
    method public static androidx.compose.foundation.shape.RoundedCornerShape getShapeLarge();
    method public static androidx.compose.foundation.shape.RoundedCornerShape getShapeMedium();
    method public static androidx.compose.foundation.shape.RoundedCornerShape getShapeNone();
    method public static androidx.compose.foundation.shape.RoundedCornerShape getShapeSmall();
    method public static androidx.compose.foundation.shape.RoundedCornerShape getShapeXLarge();
    method public static androidx.compose.foundation.shape.RoundedCornerShape getShapeXSmall();
    method public static androidx.compose.foundation.shape.RoundedCornerShape getShapeXXLarge();
    property public static final androidx.compose.runtime.ProvidableCompositionLocal<com.jarvis.core.internal.designsystem.theme.DSShape> LocalDSShapes;
    property public static final androidx.compose.foundation.shape.RoundedCornerShape ShapeLarge;
    property public static final androidx.compose.foundation.shape.RoundedCornerShape ShapeMedium;
    property public static final androidx.compose.foundation.shape.RoundedCornerShape ShapeNone;
    property public static final androidx.compose.foundation.shape.RoundedCornerShape ShapeSmall;
    property public static final androidx.compose.foundation.shape.RoundedCornerShape ShapeXLarge;
    property public static final androidx.compose.foundation.shape.RoundedCornerShape ShapeXSmall;
    property public static final androidx.compose.foundation.shape.RoundedCornerShape ShapeXXLarge;
  }

  @androidx.compose.runtime.Immutable public final class DSSpacing {
    ctor public DSSpacing(optional float none, optional float xxs, optional float xs, optional float s, optional float m, optional float l, optional float xl, optional float xxl, optional float xxxl, optional float xxxxl, optional float xxxxxl);
    method public float component1-D9Ej5fM();
    method public float component10-D9Ej5fM();
    method public float component11-D9Ej5fM();
    method public float component2-D9Ej5fM();
    method public float component3-D9Ej5fM();
    method public float component4-D9Ej5fM();
    method public float component5-D9Ej5fM();
    method public float component6-D9Ej5fM();
    method public float component7-D9Ej5fM();
    method public float component8-D9Ej5fM();
    method public float component9-D9Ej5fM();
    method public com.jarvis.core.internal.designsystem.theme.DSSpacing copy-kBVM9y0(float none, float xxs, float xs, float s, float m, float l, float xl, float xxl, float xxxl, float xxxxl, float xxxxxl);
    method public float getL();
    method public float getM();
    method public float getNone();
    method public float getS();
    method public float getXl();
    method public float getXs();
    method public float getXxl();
    method public float getXxs();
    method public float getXxxl();
    method public float getXxxxl();
    method public float getXxxxxl();
    property public final float l;
    property public final float m;
    property public final float none;
    property public final float s;
    property public final float xl;
    property public final float xs;
    property public final float xxl;
    property public final float xxs;
    property public final float xxxl;
    property public final float xxxxl;
    property public final float xxxxxl;
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public final class DSSpacingKt {
    method public static androidx.compose.runtime.ProvidableCompositionLocal<com.jarvis.core.internal.designsystem.theme.DSSpacing> getLocalDSSpacing();
    method public static float getNONE();
    method public static float getSpacingL();
    method public static float getSpacingM();
    method public static float getSpacingS();
    method public static float getSpacingXL();
    method public static float getSpacingXS();
    method public static float getSpacingXXL();
    method public static float getSpacingXXS();
    method public static float getSpacingXXXL();
    method public static float getSpacingXXXXL();
    method public static float getSpacingXXXXXL();
    property public static final androidx.compose.runtime.ProvidableCompositionLocal<com.jarvis.core.internal.designsystem.theme.DSSpacing> LocalDSSpacing;
    property public static final float NONE;
    property public static final float SpacingL;
    property public static final float SpacingM;
    property public static final float SpacingS;
    property public static final float SpacingXL;
    property public static final float SpacingXS;
    property public static final float SpacingXXL;
    property public static final float SpacingXXS;
    property public static final float SpacingXXXL;
    property public static final float SpacingXXXXL;
    property public static final float SpacingXXXXXL;
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public final class DSThemeKt {
    method @androidx.compose.runtime.Composable public static void DSJarvisTheme(optional boolean darkTheme, kotlin.jvm.functions.Function0<kotlin.Unit> content);
  }

  @androidx.compose.runtime.Immutable public final class DSTint {
    ctor public DSTint(optional long iconTint);
    method public long component1-0d7_KjU();
    method public com.jarvis.core.internal.designsystem.theme.DSTint copy-8_81llA(long iconTint);
    method public long getIconTint();
    property public final long iconTint;
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public final class DSTintKt {
    method public static androidx.compose.runtime.ProvidableCompositionLocal<com.jarvis.core.internal.designsystem.theme.DSTint> getLocalDSTint();
    property public static final androidx.compose.runtime.ProvidableCompositionLocal<com.jarvis.core.internal.designsystem.theme.DSTint> LocalDSTint;
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public final class DSTypeKt {
    method public static androidx.compose.runtime.ProvidableCompositionLocal<com.jarvis.core.internal.designsystem.theme.DSTypography> getLocalDSTypography();
    method public static androidx.compose.ui.text.font.FontFamily getSF();
    property public static final androidx.compose.runtime.ProvidableCompositionLocal<com.jarvis.core.internal.designsystem.theme.DSTypography> LocalDSTypography;
    property public static final androidx.compose.ui.text.font.FontFamily SF;
  }

  @androidx.compose.runtime.Immutable public final class DSTypography {
    ctor public DSTypography(optional com.jarvis.core.internal.designsystem.theme.DSTypography.Display display, optional com.jarvis.core.internal.designsystem.theme.DSTypography.Heading heading, optional com.jarvis.core.internal.designsystem.theme.DSTypography.Title title, optional com.jarvis.core.internal.designsystem.theme.DSTypography.Body body, optional com.jarvis.core.internal.designsystem.theme.DSTypography.Label label);
    method public com.jarvis.core.internal.designsystem.theme.DSTypography.Body getBody();
    method public com.jarvis.core.internal.designsystem.theme.DSTypography.Display getDisplay();
    method public com.jarvis.core.internal.designsystem.theme.DSTypography.Heading getHeading();
    method public com.jarvis.core.internal.designsystem.theme.DSTypography.Label getLabel();
    method public com.jarvis.core.internal.designsystem.theme.DSTypography.Title getTitle();
    property public final com.jarvis.core.internal.designsystem.theme.DSTypography.Body body;
    property public final com.jarvis.core.internal.designsystem.theme.DSTypography.Display display;
    property public final com.jarvis.core.internal.designsystem.theme.DSTypography.Heading heading;
    property public final com.jarvis.core.internal.designsystem.theme.DSTypography.Label label;
    property public final com.jarvis.core.internal.designsystem.theme.DSTypography.Title title;
  }

  public static final class DSTypography.Body {
    ctor public DSTypography.Body(optional androidx.compose.ui.text.TextStyle large, optional androidx.compose.ui.text.TextStyle medium, optional androidx.compose.ui.text.TextStyle small);
    method public androidx.compose.ui.text.TextStyle component1();
    method public androidx.compose.ui.text.TextStyle component2();
    method public androidx.compose.ui.text.TextStyle component3();
    method public com.jarvis.core.internal.designsystem.theme.DSTypography.Body copy(androidx.compose.ui.text.TextStyle large, androidx.compose.ui.text.TextStyle medium, androidx.compose.ui.text.TextStyle small);
    method public androidx.compose.ui.text.TextStyle getLarge();
    method public androidx.compose.ui.text.TextStyle getMedium();
    method public androidx.compose.ui.text.TextStyle getSmall();
    property public final androidx.compose.ui.text.TextStyle large;
    property public final androidx.compose.ui.text.TextStyle medium;
    property public final androidx.compose.ui.text.TextStyle small;
  }

  public static final class DSTypography.Display {
    ctor public DSTypography.Display(optional androidx.compose.ui.text.TextStyle large, optional androidx.compose.ui.text.TextStyle medium, optional androidx.compose.ui.text.TextStyle small);
    method public androidx.compose.ui.text.TextStyle component1();
    method public androidx.compose.ui.text.TextStyle component2();
    method public androidx.compose.ui.text.TextStyle component3();
    method public com.jarvis.core.internal.designsystem.theme.DSTypography.Display copy(androidx.compose.ui.text.TextStyle large, androidx.compose.ui.text.TextStyle medium, androidx.compose.ui.text.TextStyle small);
    method public androidx.compose.ui.text.TextStyle getLarge();
    method public androidx.compose.ui.text.TextStyle getMedium();
    method public androidx.compose.ui.text.TextStyle getSmall();
    property public final androidx.compose.ui.text.TextStyle large;
    property public final androidx.compose.ui.text.TextStyle medium;
    property public final androidx.compose.ui.text.TextStyle small;
  }

  public static final class DSTypography.Heading {
    ctor public DSTypography.Heading(optional androidx.compose.ui.text.TextStyle large, optional androidx.compose.ui.text.TextStyle medium, optional androidx.compose.ui.text.TextStyle small);
    method public androidx.compose.ui.text.TextStyle component1();
    method public androidx.compose.ui.text.TextStyle component2();
    method public androidx.compose.ui.text.TextStyle component3();
    method public com.jarvis.core.internal.designsystem.theme.DSTypography.Heading copy(androidx.compose.ui.text.TextStyle large, androidx.compose.ui.text.TextStyle medium, androidx.compose.ui.text.TextStyle small);
    method public androidx.compose.ui.text.TextStyle getLarge();
    method public androidx.compose.ui.text.TextStyle getMedium();
    method public androidx.compose.ui.text.TextStyle getSmall();
    property public final androidx.compose.ui.text.TextStyle large;
    property public final androidx.compose.ui.text.TextStyle medium;
    property public final androidx.compose.ui.text.TextStyle small;
  }

  public static final class DSTypography.Label {
    ctor public DSTypography.Label(optional androidx.compose.ui.text.TextStyle large, optional androidx.compose.ui.text.TextStyle medium, optional androidx.compose.ui.text.TextStyle small);
    method public androidx.compose.ui.text.TextStyle component1();
    method public androidx.compose.ui.text.TextStyle component2();
    method public androidx.compose.ui.text.TextStyle component3();
    method public com.jarvis.core.internal.designsystem.theme.DSTypography.Label copy(androidx.compose.ui.text.TextStyle large, androidx.compose.ui.text.TextStyle medium, androidx.compose.ui.text.TextStyle small);
    method public androidx.compose.ui.text.TextStyle getLarge();
    method public androidx.compose.ui.text.TextStyle getMedium();
    method public androidx.compose.ui.text.TextStyle getSmall();
    property public final androidx.compose.ui.text.TextStyle large;
    property public final androidx.compose.ui.text.TextStyle medium;
    property public final androidx.compose.ui.text.TextStyle small;
  }

  public static final class DSTypography.Title {
    ctor public DSTypography.Title(optional androidx.compose.ui.text.TextStyle large, optional androidx.compose.ui.text.TextStyle medium, optional androidx.compose.ui.text.TextStyle small);
    method public androidx.compose.ui.text.TextStyle component1();
    method public androidx.compose.ui.text.TextStyle component2();
    method public androidx.compose.ui.text.TextStyle component3();
    method public com.jarvis.core.internal.designsystem.theme.DSTypography.Title copy(androidx.compose.ui.text.TextStyle large, androidx.compose.ui.text.TextStyle medium, androidx.compose.ui.text.TextStyle small);
    method public androidx.compose.ui.text.TextStyle getLarge();
    method public androidx.compose.ui.text.TextStyle getMedium();
    method public androidx.compose.ui.text.TextStyle getSmall();
    property public final androidx.compose.ui.text.TextStyle large;
    property public final androidx.compose.ui.text.TextStyle medium;
    property public final androidx.compose.ui.text.TextStyle small;
  }

  @androidx.compose.runtime.Immutable public final class DarkError {
    ctor public DarkError(optional long error100, optional long error80, optional long error60, optional long error40, optional long error20);
    method public long component1-0d7_KjU();
    method public long component2-0d7_KjU();
    method public long component3-0d7_KjU();
    method public long component4-0d7_KjU();
    method public long component5-0d7_KjU();
    method public com.jarvis.core.internal.designsystem.theme.DarkError copy-t635Npw(long error100, long error80, long error60, long error40, long error20);
    method public long getError100();
    method public long getError20();
    method public long getError40();
    method public long getError60();
    method public long getError80();
    property public final long error100;
    property public final long error20;
    property public final long error40;
    property public final long error60;
    property public final long error80;
  }

  @androidx.compose.runtime.Immutable public final class DarkExtra {
    ctor public DarkExtra(optional long background, optional long surface, optional long onSurface, optional long white, optional long black, optional long transparent);
    method public long component1-0d7_KjU();
    method public long component2-0d7_KjU();
    method public long component3-0d7_KjU();
    method public long component4-0d7_KjU();
    method public long component5-0d7_KjU();
    method public long component6-0d7_KjU();
    method public com.jarvis.core.internal.designsystem.theme.DarkExtra copy-tNS2XkQ(long background, long surface, long onSurface, long white, long black, long transparent);
    method public long getBackground();
    method public long getBlack();
    method public long getOnSurface();
    method public long getSurface();
    method public long getTransparent();
    method public long getWhite();
    property public final long background;
    property public final long black;
    property public final long onSurface;
    property public final long surface;
    property public final long transparent;
    property public final long white;
  }

  @androidx.compose.runtime.Immutable public final class DarkInfo {
    ctor public DarkInfo(optional long info100, optional long info80, optional long info60, optional long info40, optional long info20);
    method public long component1-0d7_KjU();
    method public long component2-0d7_KjU();
    method public long component3-0d7_KjU();
    method public long component4-0d7_KjU();
    method public long component5-0d7_KjU();
    method public com.jarvis.core.internal.designsystem.theme.DarkInfo copy-t635Npw(long info100, long info80, long info60, long info40, long info20);
    method public long getInfo100();
    method public long getInfo20();
    method public long getInfo40();
    method public long getInfo60();
    method public long getInfo80();
    property public final long info100;
    property public final long info20;
    property public final long info40;
    property public final long info60;
    property public final long info80;
  }

  @androidx.compose.runtime.Immutable public final class DarkNeutral {
    ctor public DarkNeutral(optional long neutral100, optional long neutral80, optional long neutral60, optional long neutral40, optional long neutral20, optional long neutral0);
    method public long component1-0d7_KjU();
    method public long component2-0d7_KjU();
    method public long component3-0d7_KjU();
    method public long component4-0d7_KjU();
    method public long component5-0d7_KjU();
    method public long component6-0d7_KjU();
    method public com.jarvis.core.internal.designsystem.theme.DarkNeutral copy-tNS2XkQ(long neutral100, long neutral80, long neutral60, long neutral40, long neutral20, long neutral0);
    method public long getNeutral0();
    method public long getNeutral100();
    method public long getNeutral20();
    method public long getNeutral40();
    method public long getNeutral60();
    method public long getNeutral80();
    property public final long neutral0;
    property public final long neutral100;
    property public final long neutral20;
    property public final long neutral40;
    property public final long neutral60;
    property public final long neutral80;
  }

  @androidx.compose.runtime.Immutable public final class DarkPrimary {
    ctor public DarkPrimary(optional long primary100, optional long primary80, optional long primary60, optional long primary40, optional long primary20);
    method public long component1-0d7_KjU();
    method public long component2-0d7_KjU();
    method public long component3-0d7_KjU();
    method public long component4-0d7_KjU();
    method public long component5-0d7_KjU();
    method public com.jarvis.core.internal.designsystem.theme.DarkPrimary copy-t635Npw(long primary100, long primary80, long primary60, long primary40, long primary20);
    method public long getPrimary100();
    method public long getPrimary20();
    method public long getPrimary40();
    method public long getPrimary60();
    method public long getPrimary80();
    property public final long primary100;
    property public final long primary20;
    property public final long primary40;
    property public final long primary60;
    property public final long primary80;
  }

  @androidx.compose.runtime.Immutable public final class DarkSecondary {
    ctor public DarkSecondary(optional long secondary100, optional long secondary80, optional long secondary60, optional long secondary40, optional long secondary20);
    method public long component1-0d7_KjU();
    method public long component2-0d7_KjU();
    method public long component3-0d7_KjU();
    method public long component4-0d7_KjU();
    method public long component5-0d7_KjU();
    method public com.jarvis.core.internal.designsystem.theme.DarkSecondary copy-t635Npw(long secondary100, long secondary80, long secondary60, long secondary40, long secondary20);
    method public long getSecondary100();
    method public long getSecondary20();
    method public long getSecondary40();
    method public long getSecondary60();
    method public long getSecondary80();
    property public final long secondary100;
    property public final long secondary20;
    property public final long secondary40;
    property public final long secondary60;
    property public final long secondary80;
  }

  @androidx.compose.runtime.Immutable public final class DarkSuccess {
    ctor public DarkSuccess(optional long success100, optional long success80, optional long success60, optional long success40, optional long success20);
    method public long component1-0d7_KjU();
    method public long component2-0d7_KjU();
    method public long component3-0d7_KjU();
    method public long component4-0d7_KjU();
    method public long component5-0d7_KjU();
    method public com.jarvis.core.internal.designsystem.theme.DarkSuccess copy-t635Npw(long success100, long success80, long success60, long success40, long success20);
    method public long getSuccess100();
    method public long getSuccess20();
    method public long getSuccess40();
    method public long getSuccess60();
    method public long getSuccess80();
    property public final long success100;
    property public final long success20;
    property public final long success40;
    property public final long success60;
    property public final long success80;
  }

  @androidx.compose.runtime.Immutable public final class DarkWarning {
    ctor public DarkWarning(optional long warning100, optional long warning80, optional long warning60, optional long warning40, optional long warning20);
    method public long component1-0d7_KjU();
    method public long component2-0d7_KjU();
    method public long component3-0d7_KjU();
    method public long component4-0d7_KjU();
    method public long component5-0d7_KjU();
    method public com.jarvis.core.internal.designsystem.theme.DarkWarning copy-t635Npw(long warning100, long warning80, long warning60, long warning40, long warning20);
    method public long getWarning100();
    method public long getWarning20();
    method public long getWarning40();
    method public long getWarning60();
    method public long getWarning80();
    property public final long warning100;
    property public final long warning20;
    property public final long warning40;
    property public final long warning60;
    property public final long warning80;
  }

  @androidx.compose.runtime.Immutable public final class Error {
    ctor public Error(optional long error100, optional long error80, optional long error60, optional long error40, optional long error20);
    method public long component1-0d7_KjU();
    method public long component2-0d7_KjU();
    method public long component3-0d7_KjU();
    method public long component4-0d7_KjU();
    method public long component5-0d7_KjU();
    method public com.jarvis.core.internal.designsystem.theme.Error copy-t635Npw(long error100, long error80, long error60, long error40, long error20);
    method public long getError100();
    method public long getError20();
    method public long getError40();
    method public long getError60();
    method public long getError80();
    property public final long error100;
    property public final long error20;
    property public final long error40;
    property public final long error60;
    property public final long error80;
  }

  @androidx.compose.runtime.Immutable public final class Extra {
    ctor public Extra(optional long background, optional long surface, optional long onSurface, optional long white, optional long black, optional long transparent, optional long jarvisPink, optional long jarvisBlue);
    method public long component1-0d7_KjU();
    method public long component2-0d7_KjU();
    method public long component3-0d7_KjU();
    method public long component4-0d7_KjU();
    method public long component5-0d7_KjU();
    method public long component6-0d7_KjU();
    method public long component7-0d7_KjU();
    method public long component8-0d7_KjU();
    method public com.jarvis.core.internal.designsystem.theme.Extra copy-FD3wquc(long background, long surface, long onSurface, long white, long black, long transparent, long jarvisPink, long jarvisBlue);
    method public long getBackground();
    method public long getBlack();
    method public long getJarvisBlue();
    method public long getJarvisPink();
    method public long getOnSurface();
    method public long getSurface();
    method public long getTransparent();
    method public long getWhite();
    property public final long background;
    property public final long black;
    property public final long jarvisBlue;
    property public final long jarvisPink;
    property public final long onSurface;
    property public final long surface;
    property public final long transparent;
    property public final long white;
  }

  @androidx.compose.runtime.Immutable public final class Info {
    ctor public Info(optional long info100, optional long info80, optional long info60, optional long info40, optional long info20);
    method public long component1-0d7_KjU();
    method public long component2-0d7_KjU();
    method public long component3-0d7_KjU();
    method public long component4-0d7_KjU();
    method public long component5-0d7_KjU();
    method public com.jarvis.core.internal.designsystem.theme.Info copy-t635Npw(long info100, long info80, long info60, long info40, long info20);
    method public long getInfo100();
    method public long getInfo20();
    method public long getInfo40();
    method public long getInfo60();
    method public long getInfo80();
    property public final long info100;
    property public final long info20;
    property public final long info40;
    property public final long info60;
    property public final long info80;
  }

  @androidx.compose.runtime.Immutable public final class Neutral {
    ctor public Neutral(optional long neutral100, optional long neutral80, optional long neutral60, optional long neutral40, optional long neutral20, optional long neutral0);
    method public long component1-0d7_KjU();
    method public long component2-0d7_KjU();
    method public long component3-0d7_KjU();
    method public long component4-0d7_KjU();
    method public long component5-0d7_KjU();
    method public long component6-0d7_KjU();
    method public com.jarvis.core.internal.designsystem.theme.Neutral copy-tNS2XkQ(long neutral100, long neutral80, long neutral60, long neutral40, long neutral20, long neutral0);
    method public long getNeutral0();
    method public long getNeutral100();
    method public long getNeutral20();
    method public long getNeutral40();
    method public long getNeutral60();
    method public long getNeutral80();
    property public final long neutral0;
    property public final long neutral100;
    property public final long neutral20;
    property public final long neutral40;
    property public final long neutral60;
    property public final long neutral80;
  }

  @androidx.compose.runtime.Immutable public final class Primary {
    ctor public Primary(optional long primary100, optional long primary80, optional long primary60, optional long primary40, optional long primary20);
    method public long component1-0d7_KjU();
    method public long component2-0d7_KjU();
    method public long component3-0d7_KjU();
    method public long component4-0d7_KjU();
    method public long component5-0d7_KjU();
    method public com.jarvis.core.internal.designsystem.theme.Primary copy-t635Npw(long primary100, long primary80, long primary60, long primary40, long primary20);
    method public long getPrimary100();
    method public long getPrimary20();
    method public long getPrimary40();
    method public long getPrimary60();
    method public long getPrimary80();
    property public final long primary100;
    property public final long primary20;
    property public final long primary40;
    property public final long primary60;
    property public final long primary80;
  }

  @androidx.compose.runtime.Immutable public final class Secondary {
    ctor public Secondary(optional long secondary100, optional long secondary80, optional long secondary60, optional long secondary40, optional long secondary20);
    method public long component1-0d7_KjU();
    method public long component2-0d7_KjU();
    method public long component3-0d7_KjU();
    method public long component4-0d7_KjU();
    method public long component5-0d7_KjU();
    method public com.jarvis.core.internal.designsystem.theme.Secondary copy-t635Npw(long secondary100, long secondary80, long secondary60, long secondary40, long secondary20);
    method public long getSecondary100();
    method public long getSecondary20();
    method public long getSecondary40();
    method public long getSecondary60();
    method public long getSecondary80();
    property public final long secondary100;
    property public final long secondary20;
    property public final long secondary40;
    property public final long secondary60;
    property public final long secondary80;
  }

  @androidx.compose.runtime.Immutable public final class Success {
    ctor public Success(optional long success100, optional long success80, optional long success60, optional long success40, optional long success20);
    method public long component1-0d7_KjU();
    method public long component2-0d7_KjU();
    method public long component3-0d7_KjU();
    method public long component4-0d7_KjU();
    method public long component5-0d7_KjU();
    method public com.jarvis.core.internal.designsystem.theme.Success copy-t635Npw(long success100, long success80, long success60, long success40, long success20);
    method public long getSuccess100();
    method public long getSuccess20();
    method public long getSuccess40();
    method public long getSuccess60();
    method public long getSuccess80();
    property public final long success100;
    property public final long success20;
    property public final long success40;
    property public final long success60;
    property public final long success80;
  }

  @androidx.compose.runtime.Immutable public final class Warning {
    ctor public Warning(optional long warning100, optional long warning80, optional long warning60, optional long warning40, optional long warning20);
    method public long component1-0d7_KjU();
    method public long component2-0d7_KjU();
    method public long component3-0d7_KjU();
    method public long component4-0d7_KjU();
    method public long component5-0d7_KjU();
    method public com.jarvis.core.internal.designsystem.theme.Warning copy-t635Npw(long warning100, long warning80, long warning60, long warning40, long warning20);
    method public long getWarning100();
    method public long getWarning20();
    method public long getWarning40();
    method public long getWarning60();
    method public long getWarning80();
    property public final long warning100;
    property public final long warning20;
    property public final long warning40;
    property public final long warning60;
    property public final long warning80;
  }

}

package com.jarvis.core.internal.designsystem.utils {

  public final class DSExtensionsKt {
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static long fromAxis(androidx.compose.ui.geometry.Offset.Companion, androidx.compose.foundation.gestures.Orientation orientation, float value);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static long fromAxis(androidx.compose.ui.unit.IntOffset.Companion, androidx.compose.foundation.gestures.Orientation orientation, int value);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static long fromAxis(androidx.compose.ui.unit.IntSize.Companion, androidx.compose.foundation.gestures.Orientation orientation, float value);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static long fromAxis(androidx.compose.ui.unit.IntSize.Companion, androidx.compose.foundation.gestures.Orientation orientation, int value);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static float getAxis(long, androidx.compose.foundation.gestures.Orientation orientation);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static float getAxis(long, androidx.compose.foundation.gestures.Orientation orientation);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static int getAxis(long, androidx.compose.foundation.gestures.Orientation orientation);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static int getAxis(long, androidx.compose.foundation.gestures.Orientation orientation);
    method public static androidx.compose.foundation.gestures.Orientation getOpposite(androidx.compose.foundation.gestures.Orientation);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static long onlyAxis(long, androidx.compose.foundation.gestures.Orientation orientation);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static long reverseAxis(long, androidx.compose.foundation.gestures.Orientation orientation);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @androidx.compose.runtime.Composable public static error.NonExistentClass! toDp(float);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @androidx.compose.runtime.Composable public static error.NonExistentClass! toDp(int);
    method @androidx.compose.runtime.Stable public static long toMySize(long);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @androidx.compose.runtime.Composable public static error.NonExistentClass! toPx(float);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static boolean withTryLock(kotlinx.coroutines.sync.Mutex, kotlin.jvm.functions.Function0<kotlin.Unit> block);
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public final class DSGesturesKt {
    method @androidx.compose.runtime.Composable public static void ShakeDetectorEffect(kotlin.jvm.functions.Function0<kotlin.Unit> onShakeDetected);
    method @androidx.compose.runtime.Composable public static com.jarvis.core.internal.designsystem.utils.ShakeDetector rememberShakeDetector(kotlin.jvm.functions.Function0<kotlin.Unit> onShakeDetected);
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public final class DSModifiersKt {
    method public static androidx.compose.ui.Modifier draggable(androidx.compose.ui.Modifier, Object? key1, optional boolean enabled, optional androidx.compose.foundation.interaction.MutableInteractionSource? interactionSource, optional com.jarvis.core.internal.designsystem.utils.DragGestureDetector dragGestureDetector, optional kotlin.jvm.functions.Function1<? super androidx.compose.ui.geometry.Offset,kotlin.Unit> onDragStarted, optional kotlin.jvm.functions.Function0<kotlin.Unit> onDragStopped, kotlin.jvm.functions.Function2<? super androidx.compose.ui.input.pointer.PointerInputChange,? super androidx.compose.ui.geometry.Offset,kotlin.Unit> onDrag);
  }

  @androidx.compose.runtime.Stable public final class DSScroller {
    method public boolean isScrolling();
    property public final boolean isScrolling;
    field public static final com.jarvis.core.internal.designsystem.utils.DSScroller.Companion Companion;
  }

  public static final class DSScroller.Companion {
  }

  public enum DSScroller.Direction {
    method public final com.jarvis.core.internal.designsystem.utils.DSScroller.Direction getOpposite();
    method public static com.jarvis.core.internal.designsystem.utils.DSScroller.Direction valueOf(String value) throws java.lang.IllegalArgumentException, java.lang.NullPointerException;
    method public static com.jarvis.core.internal.designsystem.utils.DSScroller.Direction[] values();
    property public final com.jarvis.core.internal.designsystem.utils.DSScroller.Direction opposite;
    enum_constant public static final com.jarvis.core.internal.designsystem.utils.DSScroller.Direction BACKWARD;
    enum_constant public static final com.jarvis.core.internal.designsystem.utils.DSScroller.Direction FORWARD;
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public final class DSScrollerKt {
    method @androidx.compose.runtime.Composable public static com.jarvis.core.internal.designsystem.utils.DSScroller rememberScroller(androidx.compose.foundation.gestures.ScrollableState scrollableState, float pixelPerSecond);
    method @androidx.compose.runtime.Composable public static com.jarvis.core.internal.designsystem.utils.DSScroller rememberScroller(androidx.compose.foundation.gestures.ScrollableState scrollableState, float pixelAmount, optional long duration);
    method @androidx.compose.runtime.Composable public static com.jarvis.core.internal.designsystem.utils.DSScroller rememberScroller(androidx.compose.foundation.gestures.ScrollableState scrollableState, kotlin.jvm.functions.Function0<java.lang.Float> pixelAmountProvider, optional long duration);
  }

  public fun interface DragGestureDetector {
    method public suspend Object? detect(androidx.compose.ui.input.pointer.PointerInputScope, kotlin.jvm.functions.Function1<? super androidx.compose.ui.geometry.Offset,kotlin.Unit> onDragStart, kotlin.jvm.functions.Function0<kotlin.Unit> onDragEnd, kotlin.jvm.functions.Function0<kotlin.Unit> onDragCancel, kotlin.jvm.functions.Function2<? super androidx.compose.ui.input.pointer.PointerInputChange,? super androidx.compose.ui.geometry.Offset,kotlin.Unit> onDrag, kotlin.coroutines.Continuation<? super kotlin.Unit>);
  }

  public static final class DragGestureDetector.LongPress implements com.jarvis.core.internal.designsystem.utils.DragGestureDetector {
    method public suspend Object? detect(androidx.compose.ui.input.pointer.PointerInputScope, kotlin.jvm.functions.Function1<? super androidx.compose.ui.geometry.Offset,kotlin.Unit> onDragStart, kotlin.jvm.functions.Function0<kotlin.Unit> onDragEnd, kotlin.jvm.functions.Function0<kotlin.Unit> onDragCancel, kotlin.jvm.functions.Function2<? super androidx.compose.ui.input.pointer.PointerInputChange,? super androidx.compose.ui.geometry.Offset,kotlin.Unit> onDrag, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    field public static final com.jarvis.core.internal.designsystem.utils.DragGestureDetector.LongPress INSTANCE;
  }

  public static final class DragGestureDetector.Press implements com.jarvis.core.internal.designsystem.utils.DragGestureDetector {
    method public suspend Object? detect(androidx.compose.ui.input.pointer.PointerInputScope, kotlin.jvm.functions.Function1<? super androidx.compose.ui.geometry.Offset,kotlin.Unit> onDragStart, kotlin.jvm.functions.Function0<kotlin.Unit> onDragEnd, kotlin.jvm.functions.Function0<kotlin.Unit> onDragCancel, kotlin.jvm.functions.Function2<? super androidx.compose.ui.input.pointer.PointerInputChange,? super androidx.compose.ui.geometry.Offset,kotlin.Unit> onDrag, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    field public static final com.jarvis.core.internal.designsystem.utils.DragGestureDetector.Press INSTANCE;
  }

  public final class ShakeDetector implements android.hardware.SensorEventListener {
    ctor public ShakeDetector(android.content.Context context, kotlin.jvm.functions.Function0<kotlin.Unit> onShakeDetected);
    method public void onAccuracyChanged(android.hardware.Sensor? sensor, int accuracy);
    method public void onSensorChanged(android.hardware.SensorEvent? event);
    method public void start();
    method public void stop();
    field public static final com.jarvis.core.internal.designsystem.utils.ShakeDetector.Companion Companion;
  }

  public static final class ShakeDetector.Companion {
  }

}

package com.jarvis.core.internal.domain.performance {

  public final class CpuMetrics {
    ctor public CpuMetrics(float cpuUsagePercent, float appCpuUsagePercent, float systemCpuUsagePercent, optional int cores, int threadCount, optional long timestamp);
    method public float component1();
    method public float component2();
    method public float component3();
    method public int component4();
    method public int component5();
    method public long component6();
    method public com.jarvis.core.internal.domain.performance.CpuMetrics copy(float cpuUsagePercent, float appCpuUsagePercent, float systemCpuUsagePercent, int cores, int threadCount, long timestamp);
    method public float getAppCpuUsagePercent();
    method public int getCores();
    method public float getCpuUsagePercent();
    method public float getSystemCpuUsagePercent();
    method public int getThreadCount();
    method public long getTimestamp();
    property public final float appCpuUsagePercent;
    property public final int cores;
    property public final float cpuUsagePercent;
    property public final float systemCpuUsagePercent;
    property public final int threadCount;
    property public final long timestamp;
  }

  public final class ExportPerformanceMetricsUseCase {
    ctor @javax.inject.Inject public ExportPerformanceMetricsUseCase(com.jarvis.core.internal.domain.performance.PerformanceRepository repository);
    method public suspend operator Object? invoke(kotlin.coroutines.Continuation<? super java.lang.String>);
  }

  public final class FpsMetrics {
    ctor public FpsMetrics(float currentFps, float averageFps, float minFps, float maxFps, int frameDrops, int jankFrames, optional float refreshRate, optional long timestamp);
    method public float component1();
    method public float component2();
    method public float component3();
    method public float component4();
    method public int component5();
    method public int component6();
    method public float component7();
    method public long component8();
    method public com.jarvis.core.internal.domain.performance.FpsMetrics copy(float currentFps, float averageFps, float minFps, float maxFps, int frameDrops, int jankFrames, float refreshRate, long timestamp);
    method public float getAverageFps();
    method public float getCurrentFps();
    method public com.jarvis.core.internal.domain.performance.FpsStability getFpsStability();
    method public int getFrameDrops();
    method public int getJankFrames();
    method public float getMaxFps();
    method public float getMinFps();
    method public float getRefreshRate();
    method public long getTimestamp();
    property public final float averageFps;
    property public final float currentFps;
    property public final com.jarvis.core.internal.domain.performance.FpsStability fpsStability;
    property public final int frameDrops;
    property public final int jankFrames;
    property public final float maxFps;
    property public final float minFps;
    property public final float refreshRate;
    property public final long timestamp;
  }

  public enum FpsStability {
    method public static com.jarvis.core.internal.domain.performance.FpsStability valueOf(String value) throws java.lang.IllegalArgumentException, java.lang.NullPointerException;
    method public static com.jarvis.core.internal.domain.performance.FpsStability[] values();
    enum_constant public static final com.jarvis.core.internal.domain.performance.FpsStability EXCELLENT;
    enum_constant public static final com.jarvis.core.internal.domain.performance.FpsStability FAIR;
    enum_constant public static final com.jarvis.core.internal.domain.performance.FpsStability GOOD;
    enum_constant public static final com.jarvis.core.internal.domain.performance.FpsStability POOR;
  }

  public final class GetPerformanceHistoryUseCase {
    ctor @javax.inject.Inject public GetPerformanceHistoryUseCase(com.jarvis.core.internal.domain.performance.PerformanceRepository repository);
    method public operator kotlinx.coroutines.flow.Flow<java.util.List<com.jarvis.core.internal.domain.performance.PerformanceSnapshot>> invoke(optional int durationMinutes);
  }

  public final class GetPerformanceMetricsUseCase {
    ctor @javax.inject.Inject public GetPerformanceMetricsUseCase(com.jarvis.core.internal.domain.performance.PerformanceRepository repository);
    method public operator kotlinx.coroutines.flow.Flow<com.jarvis.core.internal.domain.performance.PerformanceSnapshot> invoke();
  }

  public enum LoadType {
    method public static com.jarvis.core.internal.domain.performance.LoadType valueOf(String value) throws java.lang.IllegalArgumentException, java.lang.NullPointerException;
    method public static com.jarvis.core.internal.domain.performance.LoadType[] values();
    enum_constant public static final com.jarvis.core.internal.domain.performance.LoadType CLASS_LOADING;
    enum_constant public static final com.jarvis.core.internal.domain.performance.LoadType COMPOSE_MODULE;
    enum_constant public static final com.jarvis.core.internal.domain.performance.LoadType CUSTOM;
    enum_constant public static final com.jarvis.core.internal.domain.performance.LoadType DAGGER_MODULE;
    enum_constant public static final com.jarvis.core.internal.domain.performance.LoadType DATABASE_INIT;
    enum_constant public static final com.jarvis.core.internal.domain.performance.LoadType LIBRARY_INIT;
    enum_constant public static final com.jarvis.core.internal.domain.performance.LoadType NETWORK_INIT;
  }

  public final class MemoryMetrics {
    ctor public MemoryMetrics(float heapUsedMB, float heapTotalMB, float heapMaxMB, float nativeHeapUsedMB, float nativeHeapTotalMB, float availableMemoryMB, float totalMemoryMB, optional com.jarvis.core.internal.domain.performance.MemoryPressure memoryPressure, optional long timestamp);
    method public float component1();
    method public float component2();
    method public float component3();
    method public float component4();
    method public float component5();
    method public float component6();
    method public float component7();
    method public com.jarvis.core.internal.domain.performance.MemoryPressure component8();
    method public long component9();
    method public com.jarvis.core.internal.domain.performance.MemoryMetrics copy(float heapUsedMB, float heapTotalMB, float heapMaxMB, float nativeHeapUsedMB, float nativeHeapTotalMB, float availableMemoryMB, float totalMemoryMB, com.jarvis.core.internal.domain.performance.MemoryPressure memoryPressure, long timestamp);
    method public float getAvailableMemoryMB();
    method public float getHeapMaxMB();
    method public float getHeapTotalMB();
    method public float getHeapUsagePercent();
    method public float getHeapUsedMB();
    method public com.jarvis.core.internal.domain.performance.MemoryPressure getMemoryPressure();
    method public float getNativeHeapTotalMB();
    method public float getNativeHeapUsagePercent();
    method public float getNativeHeapUsedMB();
    method public long getTimestamp();
    method public float getTotalMemoryMB();
    property public final float availableMemoryMB;
    property public final float heapMaxMB;
    property public final float heapTotalMB;
    property public final float heapUsagePercent;
    property public final float heapUsedMB;
    property public final com.jarvis.core.internal.domain.performance.MemoryPressure memoryPressure;
    property public final float nativeHeapTotalMB;
    property public final float nativeHeapUsagePercent;
    property public final float nativeHeapUsedMB;
    property public final long timestamp;
    property public final float totalMemoryMB;
  }

  public enum MemoryPressure {
    method public static com.jarvis.core.internal.domain.performance.MemoryPressure valueOf(String value) throws java.lang.IllegalArgumentException, java.lang.NullPointerException;
    method public static com.jarvis.core.internal.domain.performance.MemoryPressure[] values();
    enum_constant public static final com.jarvis.core.internal.domain.performance.MemoryPressure CRITICAL;
    enum_constant public static final com.jarvis.core.internal.domain.performance.MemoryPressure HIGH;
    enum_constant public static final com.jarvis.core.internal.domain.performance.MemoryPressure LOW;
    enum_constant public static final com.jarvis.core.internal.domain.performance.MemoryPressure MODERATE;
  }

  public final class ModuleLoadTime {
    ctor public ModuleLoadTime(String moduleName, long loadDuration, com.jarvis.core.internal.domain.performance.LoadType loadType, optional boolean isLazyLoaded, optional long timestamp);
    method public String component1();
    method public long component2-UwyO8pc();
    method public com.jarvis.core.internal.domain.performance.LoadType component3();
    method public boolean component4();
    method public long component5();
    method public com.jarvis.core.internal.domain.performance.ModuleLoadTime copy-WPwdCS8(String moduleName, long loadDuration, com.jarvis.core.internal.domain.performance.LoadType loadType, boolean isLazyLoaded, long timestamp);
    method public long getLoadDuration();
    method public com.jarvis.core.internal.domain.performance.LoadType getLoadType();
    method public String getModuleName();
    method public long getTimestamp();
    method public boolean isLazyLoaded();
    property public final boolean isLazyLoaded;
    property public final long loadDuration;
    property public final com.jarvis.core.internal.domain.performance.LoadType loadType;
    property public final String moduleName;
    property public final long timestamp;
  }

  public final class ModuleMetrics {
    ctor public ModuleMetrics(java.util.List<com.jarvis.core.internal.domain.performance.ModuleLoadTime> moduleLoadTimes, optional kotlin.time.Duration? startupTime, optional kotlin.time.Duration? coldStartTime, optional kotlin.time.Duration? warmStartTime, optional long timestamp);
    method public java.util.List<com.jarvis.core.internal.domain.performance.ModuleLoadTime> component1();
    method public kotlin.time.Duration? component2-FghU774();
    method public kotlin.time.Duration? component3-FghU774();
    method public kotlin.time.Duration? component4-FghU774();
    method public long component5();
    method public com.jarvis.core.internal.domain.performance.ModuleMetrics copy-IUEzx5o(java.util.List<com.jarvis.core.internal.domain.performance.ModuleLoadTime> moduleLoadTimes, kotlin.time.Duration? startupTime, kotlin.time.Duration? coldStartTime, kotlin.time.Duration? warmStartTime, long timestamp);
    method public kotlin.time.Duration? getColdStartTime();
    method public java.util.List<com.jarvis.core.internal.domain.performance.ModuleLoadTime> getModuleLoadTimes();
    method public kotlin.time.Duration? getStartupTime();
    method public long getTimestamp();
    method public kotlin.time.Duration? getWarmStartTime();
    property public final kotlin.time.Duration? coldStartTime;
    property public final java.util.List<com.jarvis.core.internal.domain.performance.ModuleLoadTime> moduleLoadTimes;
    property public final kotlin.time.Duration? startupTime;
    property public final long timestamp;
    property public final kotlin.time.Duration? warmStartTime;
  }

  public final class PerformanceConfig {
    ctor public PerformanceConfig(optional boolean enableCpuMonitoring, optional boolean enableMemoryMonitoring, optional boolean enableFpsMonitoring, optional boolean enableModuleMonitoring, optional long samplingIntervalMs, optional int maxHistorySize, optional boolean enableBatteryMonitoring, optional boolean enableThermalMonitoring);
    method public boolean component1();
    method public boolean component2();
    method public boolean component3();
    method public boolean component4();
    method public long component5();
    method public int component6();
    method public boolean component7();
    method public boolean component8();
    method public com.jarvis.core.internal.domain.performance.PerformanceConfig copy(boolean enableCpuMonitoring, boolean enableMemoryMonitoring, boolean enableFpsMonitoring, boolean enableModuleMonitoring, long samplingIntervalMs, int maxHistorySize, boolean enableBatteryMonitoring, boolean enableThermalMonitoring);
    method public boolean getEnableBatteryMonitoring();
    method public boolean getEnableCpuMonitoring();
    method public boolean getEnableFpsMonitoring();
    method public boolean getEnableMemoryMonitoring();
    method public boolean getEnableModuleMonitoring();
    method public boolean getEnableThermalMonitoring();
    method public int getMaxHistorySize();
    method public long getSamplingIntervalMs();
    property public final boolean enableBatteryMonitoring;
    property public final boolean enableCpuMonitoring;
    property public final boolean enableFpsMonitoring;
    property public final boolean enableMemoryMonitoring;
    property public final boolean enableModuleMonitoring;
    property public final boolean enableThermalMonitoring;
    property public final int maxHistorySize;
    property public final long samplingIntervalMs;
  }

  public interface PerformanceRepository {
    method public suspend Object? clearHistory(kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public suspend Object? exportMetrics(kotlin.coroutines.Continuation<? super java.lang.String>);
    method public suspend Object? getConfig(kotlin.coroutines.Continuation<? super com.jarvis.core.internal.domain.performance.PerformanceConfig>);
    method public kotlinx.coroutines.flow.Flow<com.jarvis.core.internal.domain.performance.CpuMetrics> getCpuMetricsFlow();
    method public kotlinx.coroutines.flow.Flow<com.jarvis.core.internal.domain.performance.FpsMetrics> getFpsMetricsFlow();
    method public kotlinx.coroutines.flow.Flow<com.jarvis.core.internal.domain.performance.MemoryMetrics> getMemoryMetricsFlow();
    method public kotlinx.coroutines.flow.Flow<com.jarvis.core.internal.domain.performance.ModuleMetrics> getModuleMetricsFlow();
    method public kotlinx.coroutines.flow.Flow<java.util.List<com.jarvis.core.internal.domain.performance.PerformanceSnapshot>> getPerformanceHistory(optional int durationMinutes);
    method public kotlinx.coroutines.flow.Flow<com.jarvis.core.internal.domain.performance.PerformanceSnapshot> getPerformanceMetricsFlow();
    method public suspend Object? isMonitoring(kotlin.coroutines.Continuation<? super java.lang.Boolean>);
    method public suspend Object? startMonitoring(optional com.jarvis.core.internal.domain.performance.PerformanceConfig config, optional kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public suspend Object? stopMonitoring(kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public suspend Object? updateConfig(com.jarvis.core.internal.domain.performance.PerformanceConfig config, kotlin.coroutines.Continuation<? super kotlin.Unit>);
  }

  public final class PerformanceSnapshot {
    ctor public PerformanceSnapshot(optional long timestamp, optional com.jarvis.core.internal.domain.performance.CpuMetrics? cpuUsage, optional com.jarvis.core.internal.domain.performance.MemoryMetrics? memoryUsage, optional com.jarvis.core.internal.domain.performance.FpsMetrics? fpsMetrics, optional com.jarvis.core.internal.domain.performance.ModuleMetrics? moduleMetrics, optional Float? batteryLevel, optional com.jarvis.core.internal.domain.performance.ThermalState thermalState);
    method public long component1();
    method public com.jarvis.core.internal.domain.performance.CpuMetrics? component2();
    method public com.jarvis.core.internal.domain.performance.MemoryMetrics? component3();
    method public com.jarvis.core.internal.domain.performance.FpsMetrics? component4();
    method public com.jarvis.core.internal.domain.performance.ModuleMetrics? component5();
    method public Float? component6();
    method public com.jarvis.core.internal.domain.performance.ThermalState component7();
    method public com.jarvis.core.internal.domain.performance.PerformanceSnapshot copy(long timestamp, com.jarvis.core.internal.domain.performance.CpuMetrics? cpuUsage, com.jarvis.core.internal.domain.performance.MemoryMetrics? memoryUsage, com.jarvis.core.internal.domain.performance.FpsMetrics? fpsMetrics, com.jarvis.core.internal.domain.performance.ModuleMetrics? moduleMetrics, Float? batteryLevel, com.jarvis.core.internal.domain.performance.ThermalState thermalState);
    method public Float? getBatteryLevel();
    method public com.jarvis.core.internal.domain.performance.CpuMetrics? getCpuUsage();
    method public com.jarvis.core.internal.domain.performance.FpsMetrics? getFpsMetrics();
    method public com.jarvis.core.internal.domain.performance.MemoryMetrics? getMemoryUsage();
    method public com.jarvis.core.internal.domain.performance.ModuleMetrics? getModuleMetrics();
    method public com.jarvis.core.internal.domain.performance.ThermalState getThermalState();
    method public long getTimestamp();
    property public final Float? batteryLevel;
    property public final com.jarvis.core.internal.domain.performance.CpuMetrics? cpuUsage;
    property public final com.jarvis.core.internal.domain.performance.FpsMetrics? fpsMetrics;
    property public final com.jarvis.core.internal.domain.performance.MemoryMetrics? memoryUsage;
    property public final com.jarvis.core.internal.domain.performance.ModuleMetrics? moduleMetrics;
    property public final com.jarvis.core.internal.domain.performance.ThermalState thermalState;
    property public final long timestamp;
  }

  public final class PerformanceSnapshotMock {
    method public com.jarvis.core.internal.domain.performance.PerformanceSnapshot getMockPerformanceSnapshot();
    property public final com.jarvis.core.internal.domain.performance.PerformanceSnapshot mockPerformanceSnapshot;
    field public static final com.jarvis.core.internal.domain.performance.PerformanceSnapshotMock INSTANCE;
  }

  public final class PerformanceThresholds {
    ctor public PerformanceThresholds(optional float cpuThreshold, optional float memoryThreshold, optional float fpsThreshold, optional int frameDropThreshold, optional long moduleLoadThreshold);
    method public float component1();
    method public float component2();
    method public float component3();
    method public int component4();
    method public long component5-UwyO8pc();
    method public com.jarvis.core.internal.domain.performance.PerformanceThresholds copy-9VgGkz4(float cpuThreshold, float memoryThreshold, float fpsThreshold, int frameDropThreshold, long moduleLoadThreshold);
    method public float getCpuThreshold();
    method public float getFpsThreshold();
    method public int getFrameDropThreshold();
    method public float getMemoryThreshold();
    method public long getModuleLoadThreshold();
    property public final float cpuThreshold;
    property public final float fpsThreshold;
    property public final int frameDropThreshold;
    property public final float memoryThreshold;
    property public final long moduleLoadThreshold;
  }

  public final class StartPerformanceMonitoringUseCase {
    ctor @javax.inject.Inject public StartPerformanceMonitoringUseCase(com.jarvis.core.internal.domain.performance.PerformanceRepository repository);
    method public suspend operator Object? invoke(optional com.jarvis.core.internal.domain.performance.PerformanceConfig config, optional kotlin.coroutines.Continuation<? super kotlin.Unit>);
  }

  public final class StopPerformanceMonitoringUseCase {
    ctor @javax.inject.Inject public StopPerformanceMonitoringUseCase(com.jarvis.core.internal.domain.performance.PerformanceRepository repository);
    method public suspend operator Object? invoke(kotlin.coroutines.Continuation<? super kotlin.Unit>);
  }

  public enum ThermalState {
    method public static com.jarvis.core.internal.domain.performance.ThermalState valueOf(String value) throws java.lang.IllegalArgumentException, java.lang.NullPointerException;
    method public static com.jarvis.core.internal.domain.performance.ThermalState[] values();
    enum_constant public static final com.jarvis.core.internal.domain.performance.ThermalState CRITICAL;
    enum_constant public static final com.jarvis.core.internal.domain.performance.ThermalState EMERGENCY;
    enum_constant public static final com.jarvis.core.internal.domain.performance.ThermalState FAIR;
    enum_constant public static final com.jarvis.core.internal.domain.performance.ThermalState NORMAL;
    enum_constant public static final com.jarvis.core.internal.domain.performance.ThermalState SERIOUS;
    enum_constant public static final com.jarvis.core.internal.domain.performance.ThermalState SHUTDOWN;
  }

  public final class UpdatePerformanceConfigUseCase {
    ctor @javax.inject.Inject public UpdatePerformanceConfigUseCase(com.jarvis.core.internal.domain.performance.PerformanceRepository repository);
    method public suspend operator Object? invoke(com.jarvis.core.internal.domain.performance.PerformanceConfig config, kotlin.coroutines.Continuation<? super kotlin.Unit>);
  }

}

package com.jarvis.core.internal.navigation {

  public final class ActionRegistry {
    method public void clearActions();
    method public void executeAction(String key);
    method public void registerAction(String key, kotlin.jvm.functions.Function0<kotlin.Unit> action);
    method public void unregisterAction(String key);
    field public static final com.jarvis.core.internal.navigation.ActionRegistry INSTANCE;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @javax.inject.Qualifier @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention.BINARY) public @interface JarvisSDKNavigator {
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public interface NavigationRoute {
    method public default androidx.compose.ui.graphics.vector.ImageVector? getActionIcon();
    method @StringRes public default Integer? getActionIconContentDescription();
    method public default String? getActionKey();
    method public default androidx.compose.ui.graphics.vector.ImageVector? getBottomBarIcon();
    method public default Integer? getBottomBarIconContentDescription();
    method @StringRes public default Integer? getBottomBarIconTextId();
    method public default androidx.compose.ui.graphics.vector.ImageVector? getBottomBarSelectedIcon();
    method public default Integer? getBottomBarSelectedIconContentDescription();
    method public default boolean getDismissable();
    method public default kotlin.reflect.KClass<?> getKclass();
    method public default androidx.compose.ui.graphics.vector.ImageVector? getNavigationIcon();
    method @StringRes public default Integer? getNavigationIconContentDescription();
    method public default com.jarvis.core.internal.navigation.NavigationRoute? getOnActionNavigate();
    method public default String getRoute();
    method public default boolean getShouldShowBottomBar();
    method public default boolean getShouldShowTopAppBar();
    method @StringRes public default Integer? getTitleTextId();
    method public default com.jarvis.core.internal.navigation.TopAppBarType getTopAppBarType();
    property public default androidx.compose.ui.graphics.vector.ImageVector? actionIcon;
    property @StringRes public default Integer? actionIconContentDescription;
    property public default String? actionKey;
    property public default androidx.compose.ui.graphics.vector.ImageVector? bottomBarIcon;
    property public default Integer? bottomBarIconContentDescription;
    property @StringRes public default Integer? bottomBarIconTextId;
    property public default androidx.compose.ui.graphics.vector.ImageVector? bottomBarSelectedIcon;
    property public default Integer? bottomBarSelectedIconContentDescription;
    property public default boolean dismissable;
    property public default kotlin.reflect.KClass<?> kclass;
    property public default androidx.compose.ui.graphics.vector.ImageVector? navigationIcon;
    property @StringRes public default Integer? navigationIconContentDescription;
    property public default com.jarvis.core.internal.navigation.NavigationRoute? onActionNavigate;
    property public default String route;
    property public default boolean shouldShowBottomBar;
    property public default boolean shouldShowTopAppBar;
    property @StringRes public default Integer? titleTextId;
    property public default com.jarvis.core.internal.navigation.TopAppBarType topAppBarType;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @dagger.hilt.android.scopes.ActivityRetainedScoped public final class Navigator {
    ctor @javax.inject.Inject public Navigator();
    method public boolean canGoBack();
    method public void clear();
    method public void clearAndGoTo(com.jarvis.core.internal.navigation.NavigationRoute destination);
    method public java.util.List<com.jarvis.core.internal.navigation.NavigationRoute> getBackStack();
    method public com.jarvis.core.internal.navigation.NavigationRoute? getCurrentDestination();
    method public com.jarvis.core.internal.navigation.NavigationRoute? getPreviousDestination();
    method public String? getTabKey(com.jarvis.core.internal.navigation.NavigationRoute destination);
    method public boolean goBack();
    method public void goTo(com.jarvis.core.internal.navigation.NavigationRoute destination);
    method public void initialize(com.jarvis.core.internal.navigation.NavigationRoute startDestination);
    method public boolean popTo(com.jarvis.core.internal.navigation.NavigationRoute destination);
    method public void popToRoot();
    method public void replace(com.jarvis.core.internal.navigation.NavigationRoute destination);
    method public void switchToTab(com.jarvis.core.internal.navigation.NavigationRoute destination, String currentTabKey, String targetTabKey);
    property public final java.util.List<com.jarvis.core.internal.navigation.NavigationRoute> backStack;
    property public final com.jarvis.core.internal.navigation.NavigationRoute? currentDestination;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public enum TopAppBarType {
    method public static com.jarvis.core.internal.navigation.TopAppBarType valueOf(String value) throws java.lang.IllegalArgumentException, java.lang.NullPointerException;
    method public static com.jarvis.core.internal.navigation.TopAppBarType[] values();
    enum_constant public static final com.jarvis.core.internal.navigation.TopAppBarType CENTER_ALIGNED;
    enum_constant public static final com.jarvis.core.internal.navigation.TopAppBarType LARGE;
    enum_constant public static final com.jarvis.core.internal.navigation.TopAppBarType MEDIUM;
  }

}

package com.jarvis.core.internal.navigation.routes {

  public final class JarvisSDKHomeGraph {
    field public static final com.jarvis.core.internal.navigation.routes.JarvisSDKHomeGraph INSTANCE;
  }

  @kotlinx.serialization.Serializable public static final class JarvisSDKHomeGraph.JarvisHome implements com.jarvis.core.internal.navigation.NavigationRoute {
    property public boolean dismissable;
    property public boolean shouldShowBottomBar;
    property public boolean shouldShowTopAppBar;
    property public Integer titleTextId;
    property public com.jarvis.core.internal.navigation.TopAppBarType topAppBarType;
    field public static final com.jarvis.core.internal.navigation.routes.JarvisSDKHomeGraph.JarvisHome INSTANCE;
  }

  public final class JarvisSDKInspectorGraph {
    field public static final com.jarvis.core.internal.navigation.routes.JarvisSDKInspectorGraph INSTANCE;
  }

  @kotlinx.serialization.Serializable public static final class JarvisSDKInspectorGraph.JarvisInspectorBreakpoints implements com.jarvis.core.internal.navigation.NavigationRoute {
    property public androidx.compose.ui.graphics.vector.ImageVector? actionIcon;
    property public Integer? actionIconContentDescription;
    property public String actionKey;
    property public androidx.compose.ui.graphics.vector.ImageVector? navigationIcon;
    property public Integer? navigationIconContentDescription;
    property public boolean shouldShowBottomBar;
    property public boolean shouldShowTopAppBar;
    property public Integer titleTextId;
    field public static final com.jarvis.core.internal.navigation.routes.JarvisSDKInspectorGraph.JarvisInspectorBreakpoints INSTANCE;
  }

  @kotlinx.serialization.Serializable public static final class JarvisSDKInspectorGraph.JarvisInspectorTransactionDetail implements com.jarvis.core.internal.navigation.NavigationRoute {
    ctor public JarvisSDKInspectorGraph.JarvisInspectorTransactionDetail(String transactionId);
    method public String component1();
    method public com.jarvis.core.internal.navigation.routes.JarvisSDKInspectorGraph.JarvisInspectorTransactionDetail copy(String transactionId);
    method public String getTransactionId();
    property public androidx.compose.ui.graphics.vector.ImageVector? navigationIcon;
    property public Integer? navigationIconContentDescription;
    property public String route;
    property public boolean shouldShowBottomBar;
    property public boolean shouldShowTopAppBar;
    property public Integer titleTextId;
    property public final String transactionId;
  }

  @kotlinx.serialization.Serializable public static final class JarvisSDKInspectorGraph.JarvisInspectorTransactions implements com.jarvis.core.internal.navigation.NavigationRoute {
    property public boolean dismissable;
    property public boolean shouldShowBottomBar;
    property public boolean shouldShowTopAppBar;
    property public Integer titleTextId;
    property public com.jarvis.core.internal.navigation.TopAppBarType topAppBarType;
    field public static final com.jarvis.core.internal.navigation.routes.JarvisSDKInspectorGraph.JarvisInspectorTransactions INSTANCE;
  }

  public final class JarvisSDKPreferencesGraph {
    field public static final com.jarvis.core.internal.navigation.routes.JarvisSDKPreferencesGraph INSTANCE;
  }

  @kotlinx.serialization.Serializable public static final class JarvisSDKPreferencesGraph.JarvisPreferences implements com.jarvis.core.internal.navigation.NavigationRoute {
    property public boolean dismissable;
    property public boolean shouldShowBottomBar;
    property public boolean shouldShowTopAppBar;
    property public Integer titleTextId;
    property public com.jarvis.core.internal.navigation.TopAppBarType topAppBarType;
    field public static final com.jarvis.core.internal.navigation.routes.JarvisSDKPreferencesGraph.JarvisPreferences INSTANCE;
  }

  public final class JarvisSDKSettingsGraph {
    field public static final com.jarvis.core.internal.navigation.routes.JarvisSDKSettingsGraph INSTANCE;
  }

  @kotlinx.serialization.Serializable public static final class JarvisSDKSettingsGraph.JarvisSettings implements com.jarvis.core.internal.navigation.NavigationRoute {
    property public boolean dismissable;
    property public boolean shouldShowBottomBar;
    property public boolean shouldShowTopAppBar;
    property public Integer titleTextId;
    property public com.jarvis.core.internal.navigation.TopAppBarType topAppBarType;
    field public static final com.jarvis.core.internal.navigation.routes.JarvisSDKSettingsGraph.JarvisSettings INSTANCE;
  }

}

package com.jarvis.core.internal.platform {

  @javax.inject.Singleton public final class JarvisPlatform {
    ctor @javax.inject.Inject public JarvisPlatform(com.jarvis.core.internal.platform.analytics.Analytics analytics, com.jarvis.core.internal.platform.crash.CrashReporter crashReporter, com.jarvis.core.internal.platform.featureflags.FeatureFlags featureFlags);
    method public com.jarvis.core.internal.platform.analytics.Analytics getAnalytics();
    method public com.jarvis.core.internal.platform.crash.CrashReporter getCrashReporter();
    method public com.jarvis.core.internal.platform.featureflags.FeatureFlags getFeatureFlags();
    method public suspend Object? initialize(kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public boolean isInitialized();
    method public suspend Object? onAppStart(kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public suspend Object? onAppStop(kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public suspend Object? setEnabled(boolean enabled, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public suspend Object? setUser(String userId, optional String? email, optional String? username, optional java.util.Map<java.lang.String,?> properties, optional kotlin.coroutines.Continuation<? super kotlin.Unit>);
    property public final com.jarvis.core.internal.platform.analytics.Analytics analytics;
    property public final com.jarvis.core.internal.platform.crash.CrashReporter crashReporter;
    property public final com.jarvis.core.internal.platform.featureflags.FeatureFlags featureFlags;
  }

}

package com.jarvis.core.internal.platform.analytics {

  public interface Analytics {
    method public suspend Object? flush(kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public suspend Object? identify(com.jarvis.core.internal.platform.analytics.UserProfile userProfile, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public suspend Object? reset(kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public suspend Object? setEnabled(boolean enabled, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public suspend Object? setUserProperties(com.jarvis.core.internal.platform.analytics.UserProfile userProfile, java.util.Map<java.lang.String,?> properties, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public suspend Object? track(com.jarvis.core.internal.platform.analytics.AnalyticsEvent event, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public suspend Object? track(String eventName, optional java.util.Map<java.lang.String,?> properties, optional kotlin.coroutines.Continuation<? super kotlin.Unit>);
  }

  public final class AnalyticsEvent {
    ctor public AnalyticsEvent(String name, optional java.util.Map<java.lang.String,?> properties, optional long timestamp, optional String? userId, optional String? sessionId);
    method public String component1();
    method public java.util.Map<java.lang.String,java.lang.Object> component2();
    method public long component3();
    method public String? component4();
    method public String? component5();
    method public com.jarvis.core.internal.platform.analytics.AnalyticsEvent copy(String name, java.util.Map<java.lang.String,?> properties, long timestamp, String? userId, String? sessionId);
    method public String getName();
    method public java.util.Map<java.lang.String,java.lang.Object> getProperties();
    method public String? getSessionId();
    method public long getTimestamp();
    method public String? getUserId();
    property public final String name;
    property public final java.util.Map<java.lang.String,java.lang.Object> properties;
    property public final String? sessionId;
    property public final long timestamp;
    property public final String? userId;
  }

  @javax.inject.Singleton public final class PostHogAnalytics implements com.jarvis.core.internal.platform.analytics.Analytics {
    ctor @javax.inject.Inject public PostHogAnalytics(@dagger.hilt.android.qualifiers.ApplicationContext android.content.Context context, @com.jarvis.core.internal.common.di.CoroutineDispatcherModule.IoDispatcher kotlinx.coroutines.CoroutineDispatcher ioDispatcher);
    method public suspend Object? flush(kotlin.coroutines.Continuation<? super error.NonExistentClass>);
    method public suspend Object? identify(com.jarvis.core.internal.platform.analytics.UserProfile userProfile, kotlin.coroutines.Continuation<? super error.NonExistentClass>);
    method public suspend Object? reset(kotlin.coroutines.Continuation<? super error.NonExistentClass>);
    method public suspend Object? setEnabled(boolean enabled, kotlin.coroutines.Continuation<? super error.NonExistentClass>);
    method public suspend Object? setUserProperties(com.jarvis.core.internal.platform.analytics.UserProfile userProfile, java.util.Map<java.lang.String,?> properties, kotlin.coroutines.Continuation<? super error.NonExistentClass>);
    method public suspend Object? track(com.jarvis.core.internal.platform.analytics.AnalyticsEvent event, kotlin.coroutines.Continuation<? super error.NonExistentClass>);
    method public suspend Object? track(String eventName, java.util.Map<java.lang.String,?> properties, kotlin.coroutines.Continuation<? super error.NonExistentClass>);
  }

  public final class UserProfile {
    ctor public UserProfile(String userId, optional java.util.Map<java.lang.String,?> properties, optional String? email, optional String? name);
    method public String component1();
    method public java.util.Map<java.lang.String,java.lang.Object> component2();
    method public String? component3();
    method public String? component4();
    method public com.jarvis.core.internal.platform.analytics.UserProfile copy(String userId, java.util.Map<java.lang.String,?> properties, String? email, String? name);
    method public String? getEmail();
    method public String? getName();
    method public java.util.Map<java.lang.String,java.lang.Object> getProperties();
    method public String getUserId();
    property public final String? email;
    property public final String? name;
    property public final java.util.Map<java.lang.String,java.lang.Object> properties;
    property public final String userId;
  }

}

package com.jarvis.core.internal.platform.crash {

  public interface CrashReporter {
    method public suspend Object? addBreadcrumb(String message, optional String category, optional com.jarvis.core.internal.platform.crash.LogLevel level, optional kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public suspend Object? initialize(kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public suspend Object? log(String message, optional com.jarvis.core.internal.platform.crash.LogLevel level, optional kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public suspend Object? recordException(Throwable throwable, optional java.util.Map<java.lang.String,java.lang.String> tags, optional kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public suspend Object? setContext(String key, java.util.Map<java.lang.String,?> context, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public suspend Object? setEnabled(boolean enabled, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public suspend Object? setTag(String key, String value, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public suspend Object? setTags(java.util.Map<java.lang.String,java.lang.String> tags, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public suspend Object? setUser(String userId, optional String? email, optional String? username, optional kotlin.coroutines.Continuation<? super kotlin.Unit>);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public enum LogLevel {
    method public final String! getValue();
    method public static com.jarvis.core.internal.platform.crash.LogLevel valueOf(String value) throws java.lang.IllegalArgumentException, java.lang.NullPointerException;
    method public static com.jarvis.core.internal.platform.crash.LogLevel[] values();
    property public final String! value;
    enum_constant public static final com.jarvis.core.internal.platform.crash.LogLevel DEBUG;
    enum_constant public static final com.jarvis.core.internal.platform.crash.LogLevel ERROR;
    enum_constant public static final com.jarvis.core.internal.platform.crash.LogLevel FATAL;
    enum_constant public static final com.jarvis.core.internal.platform.crash.LogLevel INFO;
    enum_constant public static final com.jarvis.core.internal.platform.crash.LogLevel WARNING;
  }

  @javax.inject.Singleton public final class SentryCrashReporter implements com.jarvis.core.internal.platform.crash.CrashReporter {
    ctor @javax.inject.Inject public SentryCrashReporter(@com.jarvis.core.internal.common.di.CoroutineDispatcherModule.IoDispatcher kotlinx.coroutines.CoroutineDispatcher ioDispatcher);
    method public suspend Object? addBreadcrumb(String message, String category, com.jarvis.core.internal.platform.crash.LogLevel level, kotlin.coroutines.Continuation<? super error.NonExistentClass>);
    method public suspend Object? initialize(kotlin.coroutines.Continuation<? super error.NonExistentClass>);
    method public suspend Object? log(String message, com.jarvis.core.internal.platform.crash.LogLevel level, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public suspend Object? recordException(Throwable throwable, java.util.Map<java.lang.String,java.lang.String> tags, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public suspend Object? setContext(String key, java.util.Map<java.lang.String,?> context, kotlin.coroutines.Continuation<? super error.NonExistentClass>);
    method public suspend Object? setEnabled(boolean enabled, kotlin.coroutines.Continuation<? super error.NonExistentClass>);
    method public suspend Object? setTag(String key, String value, kotlin.coroutines.Continuation<? super error.NonExistentClass>);
    method public suspend Object? setTags(java.util.Map<java.lang.String,java.lang.String> tags, kotlin.coroutines.Continuation<? super error.NonExistentClass>);
    method public suspend Object? setUser(String userId, String? email, String? username, kotlin.coroutines.Continuation<? super error.NonExistentClass>);
  }

}

package com.jarvis.core.internal.platform.di {

  @dagger.Module @dagger.hilt.InstallIn(SingletonComponent::class) public abstract class PlatformDataModule {
    ctor public PlatformDataModule();
    field public static final com.jarvis.core.internal.platform.di.PlatformDataModule.Companion Companion;
  }

  public static final class PlatformDataModule.Companion {
    method @dagger.Provides @javax.inject.Singleton public androidx.datastore.core.DataStore<androidx.datastore.preferences.core.Preferences> providePlatformDataStore(@dagger.hilt.android.qualifiers.ApplicationContext android.content.Context context);
  }

}

package com.jarvis.core.internal.platform.featureflags {

  public interface FeatureFlags {
    method public suspend Object? clearOverrides(kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public kotlinx.coroutines.flow.Flow<java.util.Map<java.lang.String,java.lang.Object>> getAllFlags();
    method public suspend Object? getBooleanFlag(String key, optional boolean defaultValue, optional kotlin.coroutines.Continuation<? super java.lang.Boolean>);
    method public suspend Object? getDoubleFlag(String key, optional double defaultValue, optional kotlin.coroutines.Continuation<? super java.lang.Double>);
    method public suspend Object? getIntFlag(String key, optional int defaultValue, optional kotlin.coroutines.Continuation<? super java.lang.Integer>);
    method public suspend Object? getJsonFlag(String key, optional java.util.Map<java.lang.String,?> defaultValue, optional kotlin.coroutines.Continuation<? super java.util.Map<java.lang.String,?>>);
    method public suspend Object? getStringFlag(String key, optional String defaultValue, optional kotlin.coroutines.Continuation<? super java.lang.String>);
    method public suspend Object? initialize(kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public suspend Object? isFeatureEnabled(String key, kotlin.coroutines.Continuation<? super java.lang.Boolean>);
    method public suspend Object? overrideFlag(String key, Object value, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public suspend Object? reload(kotlin.coroutines.Continuation<? super kotlin.Unit>);
  }

  @javax.inject.Singleton public final class PostHogFeatureFlags implements com.jarvis.core.internal.platform.featureflags.FeatureFlags {
    ctor @javax.inject.Inject public PostHogFeatureFlags(androidx.datastore.core.DataStore<androidx.datastore.preferences.core.Preferences> dataStore, @com.jarvis.core.internal.common.di.CoroutineDispatcherModule.IoDispatcher kotlinx.coroutines.CoroutineDispatcher ioDispatcher);
    method public suspend Object? clearOverrides(kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public kotlinx.coroutines.flow.Flow<java.util.Map<java.lang.String,java.lang.Object>> getAllFlags();
    method public suspend Object? getBooleanFlag(String key, boolean defaultValue, kotlin.coroutines.Continuation<? super java.lang.Boolean>);
    method public suspend Object? getDoubleFlag(String key, double defaultValue, kotlin.coroutines.Continuation<? super java.lang.Double>);
    method public suspend Object? getIntFlag(String key, int defaultValue, kotlin.coroutines.Continuation<? super java.lang.Integer>);
    method public suspend Object? getJsonFlag(String key, java.util.Map<java.lang.String,?> defaultValue, kotlin.coroutines.Continuation<? super java.util.Map<java.lang.String,?>>);
    method public suspend Object? getStringFlag(String key, String defaultValue, kotlin.coroutines.Continuation<? super java.lang.String>);
    method public suspend Object? initialize(kotlin.coroutines.Continuation<? super error.NonExistentClass>);
    method public suspend Object? isFeatureEnabled(String key, kotlin.coroutines.Continuation<? super java.lang.Boolean>);
    method public suspend Object? overrideFlag(String key, Object value, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public suspend Object? reload(kotlin.coroutines.Continuation<? super error.NonExistentClass>);
  }

}

package com.jarvis.core.internal.presentation.components {

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public final class BaseDialogsKt {
    method @androidx.compose.runtime.Composable public static void ConfirmationDialog(String title, String message, optional String confirmText, optional String dismissText, kotlin.jvm.functions.Function0<kotlin.Unit> onConfirm, kotlin.jvm.functions.Function0<kotlin.Unit> onDismiss);
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview public static void ConfirmationDialogPreview();
    method @androidx.compose.runtime.Composable public static void ErrorDialog(Throwable error, optional String title, optional String? message, kotlin.jvm.functions.Function0<kotlin.Unit> onDismiss);
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview public static void ErrorDialogPreview();
    method @androidx.compose.runtime.Composable public static void InfoDialog(String title, String message, optional String buttonText, kotlin.jvm.functions.Function0<kotlin.Unit> onDismiss);
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview public static void InfoDialogPreview();
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public final class BaseScreenComponentsKt {
    method @androidx.compose.runtime.Composable public static void EmptyContent(String message, optional androidx.compose.ui.Modifier modifier, optional String? actionText, optional kotlin.jvm.functions.Function0<kotlin.Unit>? onAction);
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(showBackground=true) public static void EmptyContentPreview();
    method @androidx.compose.runtime.Composable public static void ErrorContent(Throwable error, optional androidx.compose.ui.Modifier modifier, optional String? message, optional kotlin.jvm.functions.Function0<kotlin.Unit>? onRetry, optional kotlin.jvm.functions.Function0<kotlin.Unit>? onDismiss);
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(showBackground=true) public static void ErrorContentPreview();
    method @androidx.compose.runtime.Composable public static void LoadingContent(optional androidx.compose.ui.Modifier modifier, optional String? message);
    method @androidx.compose.runtime.Composable @androidx.compose.ui.tooling.preview.Preview(showBackground=true) public static void LoadingContentPreview();
    method @androidx.compose.runtime.Composable public static <T> void ResourceStateContent(com.jarvis.core.internal.presentation.state.ResourceState<? extends T> resourceState, optional androidx.compose.ui.Modifier modifier, optional kotlin.jvm.functions.Function0<kotlin.Unit>? onRetry, optional kotlin.jvm.functions.Function0<kotlin.Unit>? onDismiss, optional String? loadingMessage, optional String emptyMessage, optional String? emptyActionText, optional kotlin.jvm.functions.Function0<kotlin.Unit>? onEmptyAction, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> content);
  }

}

package com.jarvis.core.internal.presentation.navigation {

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public final class ListSaverKt {
    method @androidx.compose.runtime.Composable public static <T> androidx.compose.runtime.snapshots.SnapshotStateList<java.lang.Object> rememberMutableStateListOf(T... elements);
    method public static <T> androidx.compose.runtime.saveable.Saver<androidx.compose.runtime.snapshots.SnapshotStateList<T>,java.lang.Object> snapshotStateListSaver(optional androidx.compose.runtime.saveable.Saver<java.util.List<T>,?> listSaver);
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public final class ModularNavDisplayKt {
    method @androidx.compose.runtime.Composable public static void ModularNavDisplay(com.jarvis.core.internal.navigation.Navigator navigator, java.util.Set<? extends kotlin.jvm.functions.Function2<? super androidx.navigation3.runtime.EntryProviderBuilder<com.jarvis.core.internal.navigation.NavigationRoute>,? super com.jarvis.core.internal.navigation.Navigator,kotlin.Unit>> entryProviderBuilders, optional androidx.compose.ui.Modifier modifier, optional kotlin.jvm.functions.Function1<? super com.jarvis.core.internal.navigation.NavigationRoute,kotlin.Unit>? onCurrentDestinationChanged);
  }

}

package com.jarvis.core.internal.presentation.performance {

  @javax.inject.Singleton public final class JarvisPerformanceProfiler {
    ctor @javax.inject.Inject public JarvisPerformanceProfiler();
    method public String getDetailedReport();
    method public error.NonExistentClass! getPerformanceData();
    method public void startProfiling();
    method public void stopProfiling();
    method public void trackComponent(String name, optional boolean isAnimated, optional double recomposeTimeMs, optional double memoryMB);
    method public void trackRecomposition(String componentName, optional long timeMs);
    property public final error.NonExistentClass! performanceData;
    field public static final long CRITICAL_FRAME_TIME_MS = 100L; // 0x64L
    field public static final long CRITICAL_MEMORY_THRESHOLD_MB = 100L; // 0x64L
    field public static final com.jarvis.core.internal.presentation.performance.JarvisPerformanceProfiler.Companion Companion;
    field public static final int MAX_RECOMPOSITIONS_PER_SECOND = 60; // 0x3c
    field public static final String TAG = "JarvisPerformanceProfiler";
    field public static final long WARNING_FRAME_TIME_MS = 32L; // 0x20L
  }

  public static final class JarvisPerformanceProfiler.Companion {
  }

  public static final class JarvisPerformanceProfiler.ComponentMetrics {
    ctor public JarvisPerformanceProfiler.ComponentMetrics(String name, double recompositionsPerSecond, double averageRecomposeTime, double maxRecomposeTime, double memoryUsageMB, boolean isAnimated, com.jarvis.core.internal.presentation.performance.JarvisPerformanceProfiler.PerformanceSeverity severity, java.util.List<java.lang.String> suggestions);
    method public String component1();
    method public double component2();
    method public double component3();
    method public double component4();
    method public double component5();
    method public boolean component6();
    method public com.jarvis.core.internal.presentation.performance.JarvisPerformanceProfiler.PerformanceSeverity component7();
    method public java.util.List<java.lang.String> component8();
    method public com.jarvis.core.internal.presentation.performance.JarvisPerformanceProfiler.ComponentMetrics copy(String name, double recompositionsPerSecond, double averageRecomposeTime, double maxRecomposeTime, double memoryUsageMB, boolean isAnimated, com.jarvis.core.internal.presentation.performance.JarvisPerformanceProfiler.PerformanceSeverity severity, java.util.List<java.lang.String> suggestions);
    method public double getAverageRecomposeTime();
    method public double getMaxRecomposeTime();
    method public double getMemoryUsageMB();
    method public String getName();
    method public double getRecompositionsPerSecond();
    method public com.jarvis.core.internal.presentation.performance.JarvisPerformanceProfiler.PerformanceSeverity getSeverity();
    method public java.util.List<java.lang.String> getSuggestions();
    method public boolean isAnimated();
    property public final double averageRecomposeTime;
    property public final boolean isAnimated;
    property public final double maxRecomposeTime;
    property public final double memoryUsageMB;
    property public final String name;
    property public final double recompositionsPerSecond;
    property public final com.jarvis.core.internal.presentation.performance.JarvisPerformanceProfiler.PerformanceSeverity severity;
    property public final java.util.List<java.lang.String> suggestions;
  }

  public enum JarvisPerformanceProfiler.PerformanceSeverity {
    method public static com.jarvis.core.internal.presentation.performance.JarvisPerformanceProfiler.PerformanceSeverity valueOf(String value) throws java.lang.IllegalArgumentException, java.lang.NullPointerException;
    method public static com.jarvis.core.internal.presentation.performance.JarvisPerformanceProfiler.PerformanceSeverity[] values();
    enum_constant public static final com.jarvis.core.internal.presentation.performance.JarvisPerformanceProfiler.PerformanceSeverity BLOCKING;
    enum_constant public static final com.jarvis.core.internal.presentation.performance.JarvisPerformanceProfiler.PerformanceSeverity CRITICAL;
    enum_constant public static final com.jarvis.core.internal.presentation.performance.JarvisPerformanceProfiler.PerformanceSeverity GOOD;
    enum_constant public static final com.jarvis.core.internal.presentation.performance.JarvisPerformanceProfiler.PerformanceSeverity WARNING;
  }

  public static final class JarvisPerformanceProfiler.PerformanceSnapshot {
    ctor public JarvisPerformanceProfiler.PerformanceSnapshot(long timestamp, double overallFrameRate, double frameDropPercentage, java.util.List<com.jarvis.core.internal.presentation.performance.JarvisPerformanceProfiler.ComponentMetrics> criticalComponents, long totalRecompositions, double memoryUsageMB, double cpuUsagePercent, java.util.List<java.lang.String> recommendations);
    method public long component1();
    method public double component2();
    method public double component3();
    method public java.util.List<com.jarvis.core.internal.presentation.performance.JarvisPerformanceProfiler.ComponentMetrics> component4();
    method public long component5();
    method public double component6();
    method public double component7();
    method public java.util.List<java.lang.String> component8();
    method public com.jarvis.core.internal.presentation.performance.JarvisPerformanceProfiler.PerformanceSnapshot copy(long timestamp, double overallFrameRate, double frameDropPercentage, java.util.List<com.jarvis.core.internal.presentation.performance.JarvisPerformanceProfiler.ComponentMetrics> criticalComponents, long totalRecompositions, double memoryUsageMB, double cpuUsagePercent, java.util.List<java.lang.String> recommendations);
    method public double getCpuUsagePercent();
    method public java.util.List<com.jarvis.core.internal.presentation.performance.JarvisPerformanceProfiler.ComponentMetrics> getCriticalComponents();
    method public double getFrameDropPercentage();
    method public double getMemoryUsageMB();
    method public double getOverallFrameRate();
    method public java.util.List<java.lang.String> getRecommendations();
    method public long getTimestamp();
    method public long getTotalRecompositions();
    property public final double cpuUsagePercent;
    property public final java.util.List<com.jarvis.core.internal.presentation.performance.JarvisPerformanceProfiler.ComponentMetrics> criticalComponents;
    property public final double frameDropPercentage;
    property public final double memoryUsageMB;
    property public final double overallFrameRate;
    property public final java.util.List<java.lang.String> recommendations;
    property public final long timestamp;
    property public final long totalRecompositions;
  }

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public final class JarvisPerformanceProfilerKt {
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) @androidx.compose.runtime.Composable public static void TrackPerformance(String componentName, optional boolean isAnimated, com.jarvis.core.internal.presentation.performance.JarvisPerformanceProfiler profiler);
  }

}

package com.jarvis.core.internal.presentation.state {

  public abstract sealed class ResourceState<T> {
    method public final T? getDataOrNull();
    method public final Throwable? getErrorOrNull();
    method public final boolean isError();
    method public final boolean isIdle();
    method public final boolean isLoading();
    method public final boolean isSuccess();
    method public final inline <R> com.jarvis.core.internal.presentation.state.ResourceState<R> map(kotlin.jvm.functions.Function1<? super T,? extends R> transform);
    method public final inline com.jarvis.core.internal.presentation.state.ResourceState<T> onError(kotlin.jvm.functions.Function2<? super java.lang.Throwable,? super java.lang.String,kotlin.Unit> action);
    method public final inline com.jarvis.core.internal.presentation.state.ResourceState<T> onLoading(kotlin.jvm.functions.Function0<kotlin.Unit> action);
    method public final inline com.jarvis.core.internal.presentation.state.ResourceState<T> onSuccess(kotlin.jvm.functions.Function1<? super T,kotlin.Unit> action);
    property public final boolean isError;
    property public final boolean isIdle;
    property public final boolean isLoading;
    property public final boolean isSuccess;
  }

  public static final class ResourceState.Error extends com.jarvis.core.internal.presentation.state.ResourceState {
    ctor public ResourceState.Error(Throwable exception, optional String? message);
    method public Throwable component1();
    method public String? component2();
    method public com.jarvis.core.internal.presentation.state.ResourceState.Error copy(Throwable exception, String? message);
    method public Throwable getException();
    method public String? getMessage();
    property public final Throwable exception;
    property public final String? message;
  }

  public static final class ResourceState.Idle extends com.jarvis.core.internal.presentation.state.ResourceState {
    field public static final com.jarvis.core.internal.presentation.state.ResourceState.Idle INSTANCE;
  }

  public static final class ResourceState.Loading extends com.jarvis.core.internal.presentation.state.ResourceState {
    field public static final com.jarvis.core.internal.presentation.state.ResourceState.Loading INSTANCE;
  }

  public static final class ResourceState.Success<T> extends com.jarvis.core.internal.presentation.state.ResourceState<T> {
    ctor public ResourceState.Success(T data);
    method public T component1();
    method public com.jarvis.core.internal.presentation.state.ResourceState.Success<T> copy(T! data);
    method public T getData();
    property public final T data;
  }

}

package com.jarvis.core.internal.presentation.utils {

  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP}) public final class ExtensionsKt {
    method public static void openUrl(String url, android.content.Context context);
    method public static void shareUrl(String url, android.content.Context context);
  }

}

